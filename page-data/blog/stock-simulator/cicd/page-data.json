{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/stock-simulator/cicd/","result":{"data":{"markdownRemark":{"html":"<h1>Argo CD</h1>\n<p>ArgoCD는 애플리케이션의 선언적 메니페스트를 Git 저장소에 두고, 클러스터 상태를 Git에 저장된 상태와 실시간으로 비교하고 동기화 해 주는 도구입니다. Git commit만으로 배포, 롤백, 드리프트 감지 등의 기능을 제공합니다.</p>\n<p>Kubernetes 애플리케이션의 자동 배포를 위한 CD 툴로, Helm또는 Kustomize방식을 사용합니다.</p>\n<p>Git저장소를 단일 출처로 삼아, 매니페스트 파일을 Git에 두면, ArgoCD가 주기적으로 Git에서 desired state를 가져와 클러스터의 live state와 비교하고, 차이가 있다면 kubectl apply, kubectl delete와 같은 명령으로 자동 동기화를 합니다.</p>\n<hr>\n<h1>과정 기록</h1>\n<p>아래는 제가 git, ArgoCD를 이용해 CI/CD 파이프라인을 구성한 방법입니다.\nSpring backend 배포를 기준으로 작성하였습니다.</p>\n<h2>Git Repository 준비</h2>\n<p>먼저, 두가지의 Git Repository가 준비돼야 합니다.</p>\n<ul>\n<li>백엔드 Repository</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">backend<span class=\"token operator\">-</span>repo<span class=\"token operator\">/</span>\n├── <span class=\"token punctuation\">.</span>github<span class=\"token operator\">/</span>\n│\t└── workflows<span class=\"token operator\">/</span>\n│\t\t└── ci<span class=\"token operator\">-</span>cd<span class=\"token punctuation\">.</span>yml\n├── src<span class=\"token operator\">/</span>…           # Spring Boot 소스\n├── pom<span class=\"token punctuation\">.</span>xml\n└── Dockerfile</code></pre></div>\n<p>Docker image가 빌드 되는 Dockerfile과, github action을 실행할 수 있는 yaml파일이 필요합니다.</p>\n<ul>\n<li>ci/cd용 repo</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">infra<span class=\"token operator\">-</span>repo<span class=\"token operator\">/</span>\n├── argocd<span class=\"token operator\">/</span>\n│   ├── backend<span class=\"token operator\">-</span>app<span class=\"token punctuation\">.</span>yaml\n├── <span class=\"token keyword\">base</span><span class=\"token operator\">/</span>\n│   ├── backend<span class=\"token operator\">-</span>deployment<span class=\"token punctuation\">.</span>yaml\n│   ├── backend<span class=\"token operator\">-</span>service<span class=\"token punctuation\">.</span>yaml\n│   └── kustomization<span class=\"token punctuation\">.</span>yaml\n│   └── <span class=\"token keyword\">namespace</span><span class=\"token punctuation\">.</span>yaml\n└── overlays<span class=\"token operator\">/</span>\n    └── production<span class=\"token operator\">/</span>\n\t    └── patches<span class=\"token operator\">/</span>\n\t\t│   └── backend<span class=\"token operator\">-</span>env<span class=\"token punctuation\">.</span>yaml\n\t\t│   └── backend<span class=\"token operator\">-</span>replicas<span class=\"token punctuation\">.</span>yaml\n        └── kustomization<span class=\"token punctuation\">.</span>yaml\n        └── sealedsecret<span class=\"token operator\">-</span>backend<span class=\"token operator\">-</span>env<span class=\"token punctuation\">.</span>yaml</code></pre></div>\n<h2>먼저, CI 파이프라인을 설정해봅시다.</h2>\n<p>backend repository의 ci-cd.yaml파일에 아래와 같이 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> CI/CD Pipeline\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build-and-deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout code\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set up Docker Buildx\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/setup<span class=\"token punctuation\">-</span>buildx<span class=\"token punctuation\">-</span>action@v2\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Login to Docker Registry\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/login<span class=\"token punctuation\">-</span>action@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DOCKER_USER <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DOCKER_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build &amp; Push image\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/build<span class=\"token punctuation\">-</span>push<span class=\"token punctuation\">-</span>action@v4\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> .\n          <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n          <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> beming/$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.event.repository.name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.sha <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout infra repo\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">repository</span><span class=\"token punctuation\">:</span> beming<span class=\"token punctuation\">-</span>dev/stock<span class=\"token punctuation\">-</span>simulator<span class=\"token punctuation\">-</span>cicd\n          <span class=\"token key atrule\">token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.INFRA_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> infra\n          <span class=\"token key atrule\">persist-credentials</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Update Kustomize image tag\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          cd infra/base\n          yq e '.images[] \n            |= select(.name==\"beming/'${{ github.repository }}'\") \n            .newTag = \"'${{ github.sha }}'\"' -i kustomization.yaml</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Commit &amp; Push infra changes\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          cd infra\n          git config user.name \"github-actions[bot]\"\n          git config user.email \"actions@github.com\"\n          git add .\n          git commit -m \"chore: bump ${{ github.repository }} to ${{ github.sha }}\"\n          git push</span></code></pre></div>\n<p>위 yaml파일을 간단히 설명하면, main 브랜치에 코드가 push 되면, \bDockerfile을 build하여 Docker hub에 push합니다.</p>\n<p>그런 다음, ci-cd repository로 이동한 후, 방금 push한 이미지의 태그값을 kustomization.yaml파일에 알려주며 해당 repository에 커밋을 넣습니다.</p>\n<p>이 커밋은 나중에 argoCD를 트리거하는 역할을 할 것입니다.</p>\n<p>이 과정에서 세가지 환경변수를 git backend repository에 등록해야 합니다.</p>\n<ul>\n<li>DOCKER_USER: Docker hub username</li>\n<li>DOCKER_TOKEN: Docker hub에서 발급해주는 토큰</li>\n<li>INFRA_TOKEN: git에서 발급받은 ci-cd repository에 접근 가능한 토큰</li>\n</ul>\n<p>INFRA_TOKEN은 git profile 클릭 -> settings -> developer settings -> personal access tokens -> Tokens(classic)에서 발급받을 수 있습니다.</p>\n<p>환경변수는 backend repository에 접속 후, setting -> Secrets and Variables -> actions 에서 등록 가능합니다.</p>\n<h2>ArgoCD를 설정해봅시다.</h2>\n<p>이제 kubernetes가 설치돼있는, kubectl 명령을 사용할 수 있는 인스턴스에 접속합니다.</p>\n<p>kubernetes에 argoCD를 설치해줍시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1) Argo CD 네임스페이스 생성</span>\nkubectl create namespace argocd\n\n<span class=\"token comment\"># 2) Argo CD 컨트롤러 설치</span>\nkubectl apply <span class=\"token parameter variable\">-n</span> argocd <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-f</span> https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n<span class=\"token comment\"># 3) 서버 접근을 위해 포트포워딩 (로컬 테스트용)</span>\nkubectl <span class=\"token parameter variable\">-n</span> argocd port-forward svc/argocd-server <span class=\"token number\">8080</span>:443</code></pre></div>\n<p>이제 public_ip:8080 번 포트로 접속하면 argoCD의 로그인 창을 볼 수 있습니다.\n물론 인스턴스의 방화벽에서 8080번 포트가 허용돼있어야 합니다.</p>\n<p>초기 ID값은 admin이고,\n비밀번호는 아래의 명령으로 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># admin 비밀번호 = Argo CD server Pod 이름</span>\nkubectl <span class=\"token parameter variable\">-n</span> argocd get pods <span class=\"token parameter variable\">-l</span> app.kubernetes.io/name<span class=\"token operator\">=</span>argocd-server <span class=\"token parameter variable\">-o</span> name <span class=\"token punctuation\">\\</span>\n  <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d<span class=\"token string\">'/'</span> <span class=\"token parameter variable\">-f2</span>\n\n<span class=\"token comment\"># 안되면 아래의 방법을 사용</span>\nargocd admin initial-password <span class=\"token parameter variable\">-n</span> argocd</code></pre></div>\n<p>로그인에 성공했다면, 아래와 같은 화면을 볼 수 있습니다.\n![[Pasted image 20250714114029.png]]</p>\n<h2>이제 cicd repository의 스크립트 설정을 해봅시다.</h2>\n<p>아까전에 아래와 같이 꽤 복잡한 구조를 구성해뒀습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">infra<span class=\"token operator\">-</span>repo<span class=\"token operator\">/</span>\n├── argocd<span class=\"token operator\">/</span>\n│   ├── backend<span class=\"token operator\">-</span>app<span class=\"token punctuation\">.</span>yaml\n├── <span class=\"token keyword\">base</span><span class=\"token operator\">/</span>\n│   ├── backend<span class=\"token operator\">-</span>deployment<span class=\"token punctuation\">.</span>yaml\n│   ├── backend<span class=\"token operator\">-</span>service<span class=\"token punctuation\">.</span>yaml\n│   └── kustomization<span class=\"token punctuation\">.</span>yaml\n│   └── <span class=\"token keyword\">namespace</span><span class=\"token punctuation\">.</span>yaml\n└── overlays<span class=\"token operator\">/</span>\n    └── production<span class=\"token operator\">/</span>\n\t    └── patches<span class=\"token operator\">/</span>\n\t\t│   └── backend<span class=\"token operator\">-</span>env<span class=\"token punctuation\">.</span>yaml\n\t\t│   └── backend<span class=\"token operator\">-</span>replicas<span class=\"token punctuation\">.</span>yaml\n        └── kustomization<span class=\"token punctuation\">.</span>yaml\n        └── sealedsecret<span class=\"token operator\">-</span>backend<span class=\"token operator\">-</span>env<span class=\"token punctuation\">.</span>yaml</code></pre></div>\n<p>먼저, argoCD의 진입점은 /overlays/production/kustomization.yaml 파일입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> kustomize.config.k8s.io/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Kustomization\n\n<span class=\"token comment\"># 1) 공통 리소스(base)를 import</span>\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> ../../base\n  <span class=\"token punctuation\">-</span> sealedsecret<span class=\"token punctuation\">-</span>backend<span class=\"token punctuation\">-</span>env.yaml\n\n<span class=\"token comment\"># 2) 프로덕션 전용 패치 파일들</span>\n<span class=\"token key atrule\">patches</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> patches/backend<span class=\"token punctuation\">-</span>replicas.yaml\n    <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> patches/backend<span class=\"token punctuation\">-</span>env.yaml\n    <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend</code></pre></div>\n<p>이 파일을 로드하면서</p>\n<ul>\n<li><code class=\"language-text\">resources</code> 로 지정된 <code class=\"language-text\">../../base</code> 디렉토리와</li>\n<li><code class=\"language-text\">sealedsecret-backend-env.yaml</code> 을 순서대로 가져옵니다.</li>\n</ul>\n<p>그런 다음, /base/kustomization.yaml에 있는 파일을 읽습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> backend<span class=\"token punctuation\">-</span>deploy.yaml\n  <span class=\"token punctuation\">-</span> backend<span class=\"token punctuation\">-</span>svc.yaml\n  <span class=\"token punctuation\">-</span> namespace.yaml\n\n<span class=\"token key atrule\">images</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> beming/stock<span class=\"token punctuation\">-</span>simulator<span class=\"token punctuation\">-</span>back\n    <span class=\"token key atrule\">newTag</span><span class=\"token punctuation\">:</span> placeholder<span class=\"token punctuation\">-</span>backend\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> kustomize.config.k8s.io/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Kustomization</code></pre></div>\n<ul>\n<li><code class=\"language-text\">backend-deploy.yaml</code>, <code class=\"language-text\">backend-svc.yaml</code>, <code class=\"language-text\">namespace.yaml</code> 을 차례로 읽습니다.</li>\n<li><code class=\"language-text\">images</code> 블록에 따라 Deployment의 <code class=\"language-text\">image:</code> 필드를 치환하는데, 이 때 tag값은 아까전의 github action에서 치환하여 commit을 넣어줍니다.</li>\n</ul>\n<p>/base/backend-deploy.yml</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> spring<span class=\"token punctuation\">-</span>backend\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> spring<span class=\"token punctuation\">-</span>backend\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\"># base에서는 1로 두고, overlays에서 프로덕션/스테이징 복제 수 조정</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> spring<span class=\"token punctuation\">-</span>backend\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> spring<span class=\"token punctuation\">-</span>backend\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> spring<span class=\"token punctuation\">-</span>backend\n          <span class=\"token comment\"># CI에서 placeholder-backend를 실제 SHA/tag로 교체합니다</span>\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> beming/stock<span class=\"token punctuation\">-</span>simulator<span class=\"token punctuation\">-</span>back<span class=\"token punctuation\">:</span>placeholder<span class=\"token punctuation\">-</span>backend\n          <span class=\"token key atrule\">envFrom</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">secretRef</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend<span class=\"token punctuation\">-</span>env\n          <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span>\n              <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n          <span class=\"token comment\"># 선택: 헬스체크</span>\n          <span class=\"token key atrule\">readinessProbe</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /actuator/health\n              <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> http\n            <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span>\n            <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n          <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /actuator/health\n              <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> http\n            <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span>\n            <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span>\n          <span class=\"token comment\"># 선택: 리소스 요청·제한</span>\n          <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"100m\"</span>\n              <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"128Mi\"</span>\n            <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"500m\"</span>\n              <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"512Mi\"</span></code></pre></div>\n<p>/base/spring-svc.yml</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> spring<span class=\"token punctuation\">-</span>backend\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> NodePort\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> spring<span class=\"token punctuation\">-</span>backend\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span>\n      <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30080</span></code></pre></div>\n<p>/base/namespace.yaml</p>\n<div class=\"gatsby-highlight\" data-language=\"apiversion:v1\"><pre class=\"language-apiversion:v1\"><code class=\"language-apiversion:v1\">kind: Namespace\nmetadata:\n  name: backend-namespace</code></pre></div>\n<p>/patches/backend-env.yaml</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: spring-backend # base/backend-deploy.yaml 의 metadata.name 과 반드시 일치\nspec:\n  template:\n    metadata:\n      # (선택) 프로덕션 환경을 나타내는 라벨 추가\n      labels:\n        environment: production\n    spec:\n      containers:\n        - name: spring-backend # base 의 container name 과 일치\n          # 1) 프로덕션 프로파일 활성화를 위한 환경변수\n          env:\n            - name: SPRING_PROFILES_ACTIVE\n              value: production\n            - name: JAVA_OPTS\n              value: \"-Xms512m -Xmx1g\"\n          # 2) 리소스 요청(requests) / 제한(limits)\n          resources:\n            requests:\n              cpu: \"500m\"\n              memory: \"512Mi\"\n            limits:\n              cpu: \"1\"\n              memory: \"1Gi\"</code></pre></div>\n<p>/patches/backend-replicas.yaml</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: spring-backend # base/backend-deploy.yaml 에 정의된 Deployment 이름과 동일해야 합니다\nspec:\n  replicas: 3 # 프로덕션에서 원하는 복제본 수\n</code></pre></div>\n<p>아래는 GPT가 그려준 대략적인 과정입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">┌────────────────────────────────────┐\n│ 1. Git 클론 및 overlays/production 로 진입\n└────────────────────────────────────┘\n             ↓\n┌────────────────────────────────────┐\n│ 2. Kustomize load overlays/...    │\n│    ├── import base/ (resources)    │\n│    └── import sealedsecret...      │\n└────────────────────────────────────┘\n             ↓\n┌────────────────────────────────────┐\n│ 3. base/kustomization.yaml 적용   │\n│    ├─ backend-deploy.yaml      │\n│    ├─ backend-svc.yaml         │\n│    └─ namespace.yaml               │\n│    + images.newTag 치환            │\n└────────────────────────────────────┘\n             ↓\n┌────────────────────────────────────┐\n│ 4. overlays/sealedsecret 추가     │\n└────────────────────────────────────┘\n             ↓\n┌────────────────────────────────────┐\n│ 5. patches 병합                   │\n│    - replicas 변경                │\n│    - envFrom secretRef 추가       │\n└────────────────────────────────────┘\n             ↓\n┌────────────────────────────────────┐\n│ 6. 최종 매니페스트 출력            │\n└────────────────────────────────────┘\n             ↓\n┌────────────────────────────────────┐\n│ 7. Argo CD가 kubectl apply (sync) │\n└────────────────────────────────────┘\n</code></pre></div>\n<h2>환경변수 지정</h2>\n<p>제가 가장 애먹었던 부분은 바로 환경변수를 지정하는 방법입니다.\n환경변수가 public repository에 노출되지 않으면서, ArgoCD에 알려줄 수 있는 그런 방법이 필요했습니다.</p>\n<p>위의 고민을 해결하기 위해, Sealed Secret Controller를 사용했습니다.\n먼저 아래와 같이 Sealed Secret Controller를 설치해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-f</span> https://github.com/bitnami-labs/sealed-secrets/releases/latest/download/controller.yaml</code></pre></div>\n<p>아래와 같은 명령으로 secret파일을 생성해줍니다.</p>\n<p>secret-plain.yaml</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Secret\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend<span class=\"token punctuation\">-</span>env\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> backend<span class=\"token punctuation\">-</span>namespace\n<span class=\"token key atrule\">stringData</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">FRONT_BASE_URL</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://beming-stock.kro.kr\"</span>\n  <span class=\"token key atrule\">JWT_SECRET</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"randomstrlongerthan32fortestdonotusethisvalue\"</span></code></pre></div>\n<p>아래 명령으로 Sealed Secret을 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubeseal <span class=\"token parameter variable\">--format</span> yaml <span class=\"token punctuation\">\\</span>\n  <span class=\"token operator\">&lt;</span> secret-plain.yaml <span class=\"token operator\">></span> sealedsecret.yaml</code></pre></div>\n<p>이제 결과로 암호화된 sealedsecret파일을 얻을 수 있습니다.\n해당파일을 프로젝트의 /overlays/production 밑에 위치시켜줍니다.</p>\n<p>그 후, /overlays/production/kustomization.yaml의 resources에,\nsealedsecret.yaml 과 같이 등록해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> ../../base\n  <span class=\"token punctuation\">-</span> sealedsecret<span class=\"token punctuation\">-</span>backend<span class=\"token punctuation\">-</span>env.yaml</code></pre></div>\n<p>마지막으로, backend-env.yaml파일에 secret 이름을 추가해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> spring<span class=\"token punctuation\">-</span>backend\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> spring<span class=\"token punctuation\">-</span>backend\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> spring<span class=\"token punctuation\">-</span>backend\n          <span class=\"token comment\"># CI에서 placeholder-backend를 실제 SHA/tag로 교체합니다</span>\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> beming/stock<span class=\"token punctuation\">-</span>simulator<span class=\"token punctuation\">-</span>back<span class=\"token punctuation\">:</span>placeholder<span class=\"token punctuation\">-</span>backend\n          <span class=\"token key atrule\">envFrom</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">secretRef</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend<span class=\"token punctuation\">-</span>env</code></pre></div>\n<p>이제 컨테이너 내부에서 환경변수에 접근할 수 있게 됩니다.</p>\n<p>모든 과정이 성공적으로 완료되면, 아래와 같은 화면을 볼 수 있습니다.\n![[Pasted image 20250714134954.png]]</p>\n<h2>배포 확인</h2>\n<p>성공적으로 배포됐다면 api로 요청을 보낼 수 있어야겠죠?</p>\n<p>저희는 service를 생성하는 backend.svc.yaml 파일에서, 30080번 포트를 외부에 노출시켰습니다.</p>\n<p>아래 명령으로 EXTERNAL_IP값을 확인해줍시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl get services <span class=\"token parameter variable\">-n</span> backend-namespace\n\n<span class=\"token comment\"># 아래와 같은 결과가 나옵니다.</span>\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span> AGE\nspring-backend NodePort <span class=\"token number\">10.107</span>.223.38 <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span> <span class=\"token number\">80</span>:30080/TCP 3h31m</code></pre></div>\n<p>저의 경우는 EXTERNAL_IP가 비어있는데, 이런 경우는 인스턴스의 publicIP로 요청을 보내면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl http://${EXTERNAL_IP}:30080/actuator/health</code></pre></div>\n<p>위의 결과로 제대로 된 응답이 온다면 성공입니다. 이제 백엔드를 kubernetes에 자동으로 배포하는 CI/C파이프라인이 구성됐습니다.</p>\n<h1>트러블 슈팅</h1>\n<h2>ArgoCD가 접속이 되지 않음</h2>\n<p>처음에 ArgoCD로 포트포워딩이 제대로 되지 않아 접속이 불가했습니다.</p>\n<p>해결방법은 다음과 같습니다.</p>\n<ul>\n<li>인스턴스의 방화벽 설정을 열어준다</li>\n<li>아래와 같이 모든 인터페이스에 대해 포트 포워딩을 걸어준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">kubectl port-forward \\\n  --address 0.0.0.0 \\\n  svc/argocd-server -n argocd 8080:443</code></pre></div>\n<p>이제 http://&#x3C;EC2 퍼블릭IP>:8080\n으로 접속이 가능합니다.</p>\n<p>아래와 같이 백그라운드에서 실행하면 좀 더 편리합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nohup kubectl -n argocd port-forward svc/argocd-server 8080:443 --address 0.0.0.0 \\\n  > ./argocd-port-forward.log 2>&amp;1 &amp;</code></pre></div>\n<h2>이미지 pull이 실패하는 경우</h2>\n<p>argoCD UI에서 sync버튼을 눌러 backend deploy를 하면, Docker image pull 이 실패합니다.</p>\n<p>그 이유는 저희가 Docker image의 tag값을 git에서 커밋으로 올려주도록 해뒀기 때문입니다.</p>\n<p>이 상황을 피하고 싶다면, tag값을 latest로 해서 항상 이미지를 가져올 수 있게 하던가,\ngithub action을 트리거 시켜서 argoCD를 작동시키면 됩니다.</p>\n<p>태그값이 잘 들어갔는지는 argoCD의 UI log에서 확인 가능합니다.</p>\n<h2>배포에 성공했는데 ArgoCD에서 오류가 뜨는 경우</h2>\n<p>저희는 앱이 살아있다는 신호를 /actuator/health 라우트에서 신호를 받도록 yaml파일에 설정해뒀습니다.</p>\n<p>이 신호를 받기 위해서는, actuator 의존성을 Spring에 추가해둬야 합니다.</p>\n<p>gradle 기준 아래 명령을 build.gradle에 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">implementation 'org.springframework.boot:spring-boot-starter-actuator'</code></pre></div>\n<p>application.properties에서 endpoint를 노출시킵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server.port=3000\nmanagement.server.port=${server.port}\nmanagement.endpoints.web.exposure.include=health,info\nmanagement.endpoint.health.show-details=always</code></pre></div>\n<p>이렇게 하고 Docker image를 다시 빌드하면 해당 라우트가 잘 작동합니다.</p>\n<p>참고로 server.port값은 Dockerfile의 Expose값과도 일치해야 하고, yaml파일에서도 포트 번호를 잘 신경써줘야 제대로 동작합니다.</p>","frontmatter":{"date":"July 30, 2025","title":"MSA - Kubernetes, ArgoCD 배포자동화"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#argo-cd\">Argo CD</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B3%BC%EC%A0%95-%EA%B8%B0%EB%A1%9D\">과정 기록</a></p>\n<ul>\n<li><a href=\"#git-repository-%EC%A4%80%EB%B9%84\">Git Repository 준비</a></li>\n<li><a href=\"#%EB%A8%BC%EC%A0%80-ci-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%B4%EB%B4%85%EC%8B%9C%EB%8B%A4\">먼저, CI 파이프라인을 설정해봅시다.</a></li>\n<li><a href=\"#argocd%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%B4%EB%B4%85%EC%8B%9C%EB%8B%A4\">ArgoCD를 설정해봅시다.</a></li>\n<li><a href=\"#%EC%9D%B4%EC%A0%9C-cicd-repository%EC%9D%98-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%84%A4%EC%A0%95%EC%9D%84-%ED%95%B4%EB%B4%85%EC%8B%9C%EB%8B%A4\">이제 cicd repository의 스크립트 설정을 해봅시다.</a></li>\n<li><a href=\"#%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EC%A7%80%EC%A0%95\">환경변수 지정</a></li>\n<li><a href=\"#%EB%B0%B0%ED%8F%AC-%ED%99%95%EC%9D%B8\">배포 확인</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94-%EC%8A%88%ED%8C%85\">트러블 슈팅</a></p>\n<ul>\n<li><a href=\"#argocd%EA%B0%80-%EC%A0%91%EC%86%8D%EC%9D%B4-%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%8C\">ArgoCD가 접속이 되지 않음</a></li>\n<li><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-pull%EC%9D%B4-%EC%8B%A4%ED%8C%A8%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">이미지 pull이 실패하는 경우</a></li>\n<li><a href=\"#%EB%B0%B0%ED%8F%AC%EC%97%90-%EC%84%B1%EA%B3%B5%ED%96%88%EB%8A%94%EB%8D%B0-argocd%EC%97%90%EC%84%9C-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%9C%A8%EB%8A%94-%EA%B2%BD%EC%9A%B0\">배포에 성공했는데 ArgoCD에서 오류가 뜨는 경우</a></li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"id":"14fcbd4e-1e3c-507a-af5e-a50b27093377","frontmatter__slug":"/blog/stock-simulator/cicd","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}