{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/gatsby05/","result":{"data":{"markdownRemark":{"html":"<ol>\n<li>sass, scss 사용하기</li>\n</ol>\n<p>먼저 sass와 gatsby 플러그인을 설치해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install sass gatsby-plugin-sass</code></pre></div>\n<p>그 후, gatsby-config.js에 gatsby-plugin-sass를 추가해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">plugins: [`gatsby-plugin-sass`],</code></pre></div>\n<ol start=\"2\">\n<li>이미지 사용하기</li>\n</ol>\n<p>먼저, 필요한 플러그인을 설치해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp</code></pre></div>\n<p>그리고 gatsby-config.js파일에 포함시켜준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}</code></pre></div>\n<p>이미지는 static image와 dynamic image로 구분할 수 있다.</p>\n<p>먼저, static image를 사용하는 방법을 보자.\ngatsby를 처음 설치하면 src/pages/index.js파일에 StaticImage 태그로 감싸진 부분을 볼 수 있다.\n이것과 같은 방식으로 사용하면 되는데, 이미지를 src/images같은 폴더에 넣어주고 StaticImage를 사용해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { StaticImage } from \"gatsby-plugin-image\"\n\nexport function Dino() {\n  return &lt;StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n}</code></pre></div>\n<p>외부의 이미지를 사용할 땐 src부분에 url을 적어줘도 된다.</p>\n<p>StaticImage태그에는 아래와 같이 사용할 수 있는 여러 옵션이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;StaticImage\n      src=\"../images/dino.png\"\n      alt=\"A dinosaur\"\n      placeholder=\"blurred\"\n      layout=\"fixed\"\n      width={200}\n      height={200}\n/></code></pre></div>\n<p>자세한 내용은 아래 사이트에서 확인할 수 있다.\n<a href=\"https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image\">https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image</a></p>\n<p>다음으로 Dynamic image를 사용하는 방법이다.\nDynamic image를 사용하기 위해서는 graphql로 이미지를 불러와야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">query {\n  blogPost(id: { eq: $Id }) {\n    title\n    body\n    author\n    avatar {\n      childImageSharp {\n        gatsbyImageData(\n          width: 200\n          placeholder: BLURRED\n          formats: [AUTO, WEBP, AVIF]\n        )\n      }\n    }\n  }\n}</code></pre></div>\n<p>이런식으로 graphql에서 image를 로딩하면 된다. 옵션도 줄 수 있다.\n이제 image를 표현하려면 getImage함수와 GatsbyImage태그를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"\\import\"><pre class=\"language-\\import\"><code class=\"language-\\import\">import { GatsbyImage, getImage } from &quot;gatsby-plugin-image&quot;\n\nfunction BlogPost({ data }) {\n  const image = getImage(data.blogPost.avatar)\n  return (\n    &lt;section&gt;\n      &lt;h2&gt;{data.blogPost.title}&lt;/h2&gt;\n      &lt;GatsbyImage image={image} alt={data.blogPost.author} /&gt;\n      &lt;p&gt;{data.blogPost.body}&lt;/p&gt;\n    &lt;/section&gt;\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    blogPost(id: { eq: $Id }) {\n      title\n      body\n      author\n      avatar {\n        childImageSharp {\n          gatsbyImageData(\n            width: 200\n            placeholder: BLURRED\n            formats: [AUTO, WEBP, AVIF]\n          )\n        }\n      }\n    }\n  }\n`</code></pre></div>","frontmatter":{"date":"October 02, 2022","title":"gatsby로 블로그 만들기 05"},"tableOfContents":""}},"pageContext":{"id":"78e93ceb-3fd9-5b95-b052-8077d3dfa857","frontmatter__slug":"/blog/gatsby05","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}