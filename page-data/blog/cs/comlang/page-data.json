{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/cs/comlang/","result":{"data":{"markdownRemark":{"html":"<h2>비트</h2>\n<p>문자 언어는 다음과 같은 세 가지 구성요소로 이루어져 있다.</p>\n<ul>\n<li>기호가 들어갈 상자</li>\n<li>상자에 들어갈 기호</li>\n<li>상자의 순서\n컴퓨터에서는 이 상자를 비트라고 부른다.</li>\n</ul>\n<h2>논리 연산</h2>\n<p>다른 비트들이 표현하는 내용으로부터 새로운 비트를 만들어내는 동작</p>\n<h3>불리언 대수</h3>\n<p>비트에 대해 사용할 수 있는 연산 규칙의 집합</p>\n<ul>\n<li>NOT</li>\n<li>AND</li>\n<li>OR</li>\n<li>XOR: 두 비트의 값이 다른 경우에만 참.</li>\n</ul>\n<h3>드모르간 법칙</h3>\n<p>a AND b = ~(~a OR ~b)\na OR b = ~(~a AND ~b)</p>\n<h2>정수를 비트로 표현하는 방법</h2>\n<h3>양의 정수 표현</h3>\n<p>우리는 10진수를 쓰지만, 컴퓨터는 2진수를 사용.</p>\n<ul>\n<li>LSB(least significant bit): 가장 오른쪽의 비트.</li>\n<li>MSB(most significant bit): 가장 왼쪽의 비트</li>\n</ul>\n<h3>2진수 덧셈</h3>\n<p>두 비트를 서로 더한 결과: XOR\n올림: AND</p>\n<ul>\n<li>오버플로: MSB에서 올림이 발생하는 경우</li>\n</ul>\n<h3>음수표현</h3>\n<ul>\n<li>부호와 크기: MSB를 부호로 쓰기로 정하고, 나머지 비트로 크기를 나타냄</li>\n<li>1의 보수: 양수의 모든 비트를 뒤집음. 0을 두 가지 방식으로 표현하게 됨</li>\n<li>2의 보수: +1에 더했을 때 0이 나오는 비트 패턴을 찾고, 이를 -1이라고 하자 => 1의 보수를 취하고 1을 더하면 된다.</li>\n</ul>\n<h2>실수를 표현하는 방법</h2>\n<h3>고정 소수점 표현법</h3>\n<p>4비트가 있다면 2비트는 소수점(분수), 2비트는 정수를 나타내는데 사용.\n쓸모 있는 범위의 실수를 표현할 때, 비트가 너무 많이 필요함</p>\n<h3>부동 소수점 표현법</h3>\n<p>과학적 표기법에서 10진 소수점 왼쪽이 한 자리뿐인 소수에 10을 몇번 거듭제곱한 값을 곱했는지로 표현. ex) 1.2 * 10^-12\n가수부분은 2진 소수, 지수 부분은 2의 거듭제곱 횟수를 표현.</p>\n<ul>\n<li>같은 값을 표현하는 방법이 여러가지가 된다</li>\n<li>비트 패턴이 가능한 모든 수 표현하지는 못함</li>\n</ul>\n<h3>IEEE 부동 소수점 표준</h3>\n<ul>\n<li>가수와 지수에 대해 각각 부호 비트 사용</li>\n<li>여러 트릭을 사용해 낭비되는 비트 최소화, 반올림 쉽게 함.</li>\n</ul>\n<p>정규화: 가수를 조정해서 맨 앞에 0이 없게 만든다.\n가수의 맨 왼쪽이 1이라는 사실을 알고 있으므로, 이를 생략</p>\n<h2>2진 코드화한 10진수 시스템</h2>\n<p>BCD(binary-coded decimal)\n4진수를 사용해 10진 숫자를 하나 표현\nex) 12 = 0001 0010</p>\n<h2>2진수를 다르는 쉬운 방법</h2>\n<h3>8진 표현법</h3>\n<p>비트들을 3개씩 그룹으로 묶고, 각 그룹에 8진 숫자를 부여</p>\n<h3>15진 표현법</h3>\n<p>요즘 컴퓨터가 8비트의 배수를 사용해 만들어지기 때문에 자주 쓰임.\n비트들을 4개씩 그룹으로 묶고, 각 그룹에 16진 숫자를 부여</p>\n<h3>프로그래밍 언어의 진법 표기법</h3>\n<ul>\n<li>0으로 시작하는 숫자는 8진 숫자이다.</li>\n<li>1~9 사이의 숫자로 시작하는 숫자는 10진 숫자이다.</li>\n<li>0x가 앞에 붙은 숫자는 16진수이다.</li>\n</ul>\n<h2>비트 그룹의 이름</h2>\n<p>비트는 너무 작아서 기본 단위로 사용하기에는 유용성이 떨어진다.\n4비트 -> 니블\n8비트 -> 1바이트\n16비트 -> 하프워드\n32비트 -> 워드\n64비트 -> 더블워드</p>\n<h2>텍스트 표현</h2>\n<h3>아스키 코드</h3>\n<p>ASCII: American standard code for information interchange\n키보드에 있는 모든 기호에 대해 7비트 수 값을 할당.\n몇가지는 장치를 제어하기 위해 쓰이는 제어 문자임.</p>\n<h3>다른 표준의 진화</h3>\n<p>영어 외의 언어를 지원해야할 필요가 생김</p>\n<ul>\n<li>ISO: 국제 표준화 기구 -> ISO-646, ISO-8859\n표준이 여러개인 이유는 비트가 비싼 시절에 문자를 7, 8비트에 욱여넣으려다 보니까 그렇게 됨.\n비트 가격이 떨어지면서 <strong>유니코드</strong> 라는 새로운 표준이 만들어짐.</li>\n</ul>\n<h3>유니코드 변환 형식 8비트 (UTF - 8)</h3>\n<p>비트를 아끼기 위해 한 문자를 8비트로 표현함.\n유니코드는 문자 코드에 따라 각기 다른 인코딩을 사용해서 이 문제를 해결한다.</p>\n<ul>\n<li>UTF-8은 모든 아스키 문자를 8비트로 표현, 아스키 데이터를 인코딩 할때는 추가 공간이 필요하지 않다.</li>\n<li>아스키가 아닌 문자의 경우 아스키를 받아서 처리하는 프로그램이 깨지지 않는 방법으로 인코딩\n<br/></li>\n<li>문자를 8비트 덩어리로 나누면서, 맨 앞 비트들은 0, 10, 110, 1110과 같은 식으로 구분할 수 있게 채움. ex) 11자리 2비트 -> 5자리/6자리. 5자리는 앞에 110, 6자리는 앞에 10을 채움.</li>\n</ul>\n<h2>문자를 사용한 수 표현</h2>\n<p>2진 데이터를 송수신하고 싶지만, 아스키 코드 중 상당수가 제어문자이고, 시스템마다 이를 처리하는 방식이 달라서 어려웠다.</p>\n<h3>출력 가능하게 변경한 인코딩 (QP인코딩)</h3>\n<p>8비트 데이터를 7비트 데이터만 지원하는 통신 경로를 통해 송수신 하기 위한 인코딩 방법.</p>\n<h3>base64 인코딩</h3>\n<p>3바이트 데이터를 4문자로 표현. 3바이트 데이터의 24바트를 4*6으로 나누고, 각 덩어리의 6비트 값에 출력 가능한 문자를 할당해 표현\n원본 데이터 길이가 2바이트 남으면 =, 1바이트 남으면 == 를 붙인다.</p>\n<h3>URL 인코딩</h3>\n<p>URL에 사용할 수 없는 문자들을 %뒤에 어떤 문자의 16진 표현을 덧붙이는 방식으로 문자를 인코딩한다.</p>\n<h2>색을 표현하는 방법</h2>\n<p>컴퓨터 모니터의 각 격자에 찍는 점 픽셀.\n빨간색, 녹색, 파란색 광선을 섞에 색을 만들어내는 RGB색 모델을 사용.\n색 표현에 24비트를 사용함. -> 가장 가까운 표준인 32비트(워드)에 넣어서 사용.\n낭비되는 8비트는 투명도를 나타내는데 사용하기로 함.</p>\n<h3>색 인코딩</h3>\n<p>16진 트리플렛: # 뒤에 16진 숫자를 추가. ex) #rrggbb</p>","frontmatter":{"date":"December 03, 2023","title":"컴퓨터 내부의 언어 체계"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%B9%84%ED%8A%B8\">비트</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0\">논리 연산</a></p>\n<ul>\n<li><a href=\"#%EB%B6%88%EB%A6%AC%EC%96%B8-%EB%8C%80%EC%88%98\">불리언 대수</a></li>\n<li><a href=\"#%EB%93%9C%EB%AA%A8%EB%A5%B4%EA%B0%84-%EB%B2%95%EC%B9%99\">드모르간 법칙</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EC%88%98%EB%A5%BC-%EB%B9%84%ED%8A%B8%EB%A1%9C-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">정수를 비트로 표현하는 방법</a></p>\n<ul>\n<li><a href=\"#%EC%96%91%EC%9D%98-%EC%A0%95%EC%88%98-%ED%91%9C%ED%98%84\">양의 정수 표현</a></li>\n<li><a href=\"#2%EC%A7%84%EC%88%98-%EB%8D%A7%EC%85%88\">2진수 덧셈</a></li>\n<li><a href=\"#%EC%9D%8C%EC%88%98%ED%91%9C%ED%98%84\">음수표현</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8B%A4%EC%88%98%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">실수를 표현하는 방법</a></p>\n<ul>\n<li><a href=\"#%EA%B3%A0%EC%A0%95-%EC%86%8C%EC%88%98%EC%A0%90-%ED%91%9C%ED%98%84%EB%B2%95\">고정 소수점 표현법</a></li>\n<li><a href=\"#%EB%B6%80%EB%8F%99-%EC%86%8C%EC%88%98%EC%A0%90-%ED%91%9C%ED%98%84%EB%B2%95\">부동 소수점 표현법</a></li>\n<li><a href=\"#ieee-%EB%B6%80%EB%8F%99-%EC%86%8C%EC%88%98%EC%A0%90-%ED%91%9C%EC%A4%80\">IEEE 부동 소수점 표준</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2%EC%A7%84-%EC%BD%94%EB%93%9C%ED%99%94%ED%95%9C-10%EC%A7%84%EC%88%98-%EC%8B%9C%EC%8A%A4%ED%85%9C\">2진 코드화한 10진수 시스템</a></p>\n</li>\n<li>\n<p><a href=\"#2%EC%A7%84%EC%88%98%EB%A5%BC-%EB%8B%A4%EB%A5%B4%EB%8A%94-%EC%89%AC%EC%9A%B4-%EB%B0%A9%EB%B2%95\">2진수를 다르는 쉬운 방법</a></p>\n<ul>\n<li><a href=\"#8%EC%A7%84-%ED%91%9C%ED%98%84%EB%B2%95\">8진 표현법</a></li>\n<li><a href=\"#15%EC%A7%84-%ED%91%9C%ED%98%84%EB%B2%95\">15진 표현법</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%A7%84%EB%B2%95-%ED%91%9C%EA%B8%B0%EB%B2%95\">프로그래밍 언어의 진법 표기법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B9%84%ED%8A%B8-%EA%B7%B8%EB%A3%B9%EC%9D%98-%EC%9D%B4%EB%A6%84\">비트 그룹의 이름</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%85%8D%EC%8A%A4%ED%8A%B8-%ED%91%9C%ED%98%84\">텍스트 표현</a></p>\n<ul>\n<li><a href=\"#%EC%95%84%EC%8A%A4%ED%82%A4-%EC%BD%94%EB%93%9C\">아스키 코드</a></li>\n<li><a href=\"#%EB%8B%A4%EB%A5%B8-%ED%91%9C%EC%A4%80%EC%9D%98-%EC%A7%84%ED%99%94\">다른 표준의 진화</a></li>\n<li><a href=\"#%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C-%EB%B3%80%ED%99%98-%ED%98%95%EC%8B%9D-8%EB%B9%84%ED%8A%B8-utf---8\">유니코드 변환 형식 8비트 (UTF - 8)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%88%98-%ED%91%9C%ED%98%84\">문자를 사용한 수 표현</a></p>\n<ul>\n<li><a href=\"#%EC%B6%9C%EB%A0%A5-%EA%B0%80%EB%8A%A5%ED%95%98%EA%B2%8C-%EB%B3%80%EA%B2%BD%ED%95%9C-%EC%9D%B8%EC%BD%94%EB%94%A9-qp%EC%9D%B8%EC%BD%94%EB%94%A9\">출력 가능하게 변경한 인코딩 (QP인코딩)</a></li>\n<li><a href=\"#base64-%EC%9D%B8%EC%BD%94%EB%94%A9\">base64 인코딩</a></li>\n<li><a href=\"#url-%EC%9D%B8%EC%BD%94%EB%94%A9\">URL 인코딩</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%83%89%EC%9D%84-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">색을 표현하는 방법</a></p>\n<ul>\n<li><a href=\"#%EC%83%89-%EC%9D%B8%EC%BD%94%EB%94%A9\">색 인코딩</a></li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"id":"b0aa7340-d0ae-512c-a52b-c4e6a312af89","frontmatter__slug":"/blog/cs/comlang","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}