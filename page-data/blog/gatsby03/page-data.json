{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/gatsby03/","result":{"data":{"markdownRemark":{"html":"<p>카테고리 분류하기</p>\n<p>markdown으로 작성된 포스트를 읽는 페이지를 만드는 것까지 성공했다면, 카테고리를 구분하는 것도 매우 쉽게 가능하다.</p>\n<p>먼저, 우리가 작성했던 포스트의 frontmatter에 categories 필드를 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">slug: \"/blog/my-first-post\"\ndate: \"2021-04-09\"\ntitle: \"My first blog post\"\ncategories: \"algorithm\"</code></pre></div>\n<p>이렇게 해주는 것만으로도 우리는 이제 graphql을 이용해 categories필드의 내용을 불러올 수 있다.</p>\n<p>이제 {MarkdownRemark.frontmatter<strong>slug}.js를 만들 때와 마찬가지로 src/pages폴더에 {MarkdownRemark.frontmatter</strong>categories}.js 파일을 만들어주자. 이렇게 파일을 만들면 <a href=\"http://localhost:8000/%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC%EC%9D%B4%EB%A6%84\">http://localhost:8000/카테고리이름</a> 의 링크로 접속할 수 있다. {MarkdownRemark.frontmatter<strong>categories}.js안의 내용을 수정해서 페이지를 꾸며주기만 하면 된다.\n참고로 페이지에서 전달반은 카테고리의 이름은, props.params.frontmatter</strong>categories에 접근하면 값을 얻을 수 있다.</p>\n<p>예시로 내가 만든 {MarkdownRemark.frontmatter__categories}.js 코드를 올려놓겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { graphql } from \"gatsby\"\nimport * as React from \"react\"\nimport Layout from \"../components/layout\"\nimport CategoryItem from \"../components/CategoryItem\"\nimport \"./categories.scss\"\n\nexport default function BlogPostTemplate({ data, params }) {\n  let posts = data.allMarkdownRemark.edges.filter(\n    edge => edge.node.frontmatter.categories === params.frontmatter__categories\n  )\n  return (\n    &lt;Layout>\n      &lt;div className=\"category-page\">\n        &lt;span className=\"category-title\">{params.frontmatter__categories}&lt;/span>\n        &lt;div className=\"category-item-box\">\n          {posts.map((post, i) => (\n            &lt;CategoryItem\n              key={i}\n              info={post.node.frontmatter}\n              categoryPage={true}\n            />\n          ))}\n        &lt;/div>\n      &lt;/div>\n    &lt;/Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          frontmatter {\n            thumbnail\n            categories\n            date\n            slug\n            title\n          }\n        }\n      }\n    }\n  }\n`\n</code></pre></div>\n<p>간단히 설명하면 모든 포스트를 불러와서 category이름이 일치하는 것만 필터링하여 화면에 표시해줬다.</p>\n<p>마지막으로 다른 페이지에서 graphql을 사용해 categories에 접근하려면 아래의 구문을 통해서 중복없이 어떤 카테고리들이 있는지 뽑아올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">query {\n    allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___categories) {\n        fieldValue\n        totalCount\n      }\n    }\n  }</code></pre></div>","frontmatter":{"date":"September 30, 2022","title":"gatsby로 블로그 만들기 03"},"tableOfContents":""}},"pageContext":{"id":"30b2791b-90f1-5911-b9d4-470b49134058","frontmatter__slug":"/blog/gatsby03","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}