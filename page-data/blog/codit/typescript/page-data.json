{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/codit/typescript/","result":{"data":{"markdownRemark":{"html":"<h1>개요</h1>\n<p>코딧의 서비스는 여전히 Javascript를 사용하고 있는 곳이 많습니다.\napi서버는 typescript로의 마이그레이션을 마쳤지만, 크롤러, 인덱서, admin등 나머지 코드는 전부 javascript를 사용하고 있습니다.</p>\n<p>서비스 자체가 데이터 요구사항, 기획 변경등에 따라 수정이 잦고, 여러명이 관리하기 때문에 javascript로 작성된 코드를 유지보수 하는것이 디버깅, 개발 속도 면에서 불리했습니다.</p>\n<p>그래서 이번 기회에 javascript코드를 typescript로 점진적으로 마이그레이션 하며 개발을 진행하기로 했습니다.</p>\n<p>Javascript를 Typescript로 마이그레이션 할 때는 모든 파일을 이동할 필요 없이 점진적으로 적용할 수 있기 때문에, 실제 운영 중인 서비스에서도 무리 없이 진행할 수 있었습니다.</p>\n<hr>\n<h2>왜 TypeScript인가?</h2>\n<ul>\n<li><strong>정적 타입 검증</strong>: 컴파일 타임에 타입 오류를 잡아내 런타임 에러를 줄입니다.</li>\n<li><strong>IDE 지원 강화</strong>: 자동완성·리팩토링·정적 분석 기능 활용이 수월해집니다.</li>\n<li><strong>명시적 문서화</strong>: 인터페이스와 타입 별칭으로 코드 의도를 명확히 표현합니다.</li>\n<li><strong>대규모 협업</strong>: 명확한 계약(contract)이 있어 팀원 간 변경 충돌을 방지합니다.</li>\n</ul>\n<hr>\n<h2>사전 준비</h2>\n<ol>\n<li><strong>Node.js &#x26; npm/yarn</strong>\n<ul>\n<li>최소 Node.js 12 이상 권장</li>\n</ul>\n</li>\n<li><strong>빌드 툴 확인</strong>\n<ul>\n<li>Webpack, Rollup, Babel 등</li>\n</ul>\n</li>\n<li><strong>버전 관리</strong>\n<ul>\n<li>Git 브랜치를 분리하여 실험적 마이그레이션 진행</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2><code class=\"language-text\">tsconfig.json</code> 설정하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsonc\"><pre class=\"language-jsonc\"><code class=\"language-jsonc\">{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;ES2020&quot;,                 // 컴파일 후 타겟 JS 버전\n    &quot;module&quot;: &quot;CommonJS&quot;,               // 모듈 시스템 설정\n    &quot;strict&quot;: true,                     // 모든 엄격 모드 옵션 활성화\n    &quot;noImplicitAny&quot;: true,              // 암묵적 any 금지\n    &quot;strictNullChecks&quot;: true,           // null, undefined 검사 강화\n    &quot;esModuleInterop&quot;: true,            // CommonJS 호환\n    &quot;skipLibCheck&quot;: true,               // @types 로딩 속도 최적화\n    &quot;forceConsistentCasingInFileNames&quot;: true,\n    &quot;moduleResolution&quot;: &quot;node&quot;,\n    &quot;outDir&quot;: &quot;dist&quot;,\n    &quot;rootDir&quot;: &quot;src&quot;,\n    &quot;declaration&quot;: true,                // .d.ts 파일 생성\n    &quot;allowJs&quot;: true,                    // .js 파일도 컴파일 대상\n    &quot;checkJs&quot;: false                    // JSDoc 검사 여부 (점진적 전환 시 true 추천)\n  },\n  &quot;include&quot;: [&quot;src/**/*&quot;],\n  &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;]\n}</code></pre></div>\n<ul>\n<li>allowJs: true 로 초기 단계에서 .js 파일도 함께 컴파일하도록 설정하고</li>\n<li>점차 .js → .ts 로 파일명을 변경해 나갑니다.</li>\n</ul>\n<p>typescript는 결국 javascript로 컴파일 되기 때문에, allowJS 옵션을 허용하여 컴파일 대상에 포함시킵니다.</p>\n<h2>점진적 파일 확장자 변경</h2>\n<ol>\n<li><strong>핵심 유틸리티부터</strong>\n자주 변경되지 않는 안정적인 유틸리티부터 <code class=\"language-text\">.js → .ts</code> 변경</li>\n<li><strong>비즈니스 로직</strong>\n데이터 모델, 서비스 레이어 등 점진적 변경</li>\n<li><strong>엔트리 포인트</strong>\n최종적으로 <code class=\"language-text\">index.js</code> 등 엔트리 포인트를 <code class=\"language-text\">.ts</code>로 변환</li>\n</ol>\n<hr>\n<h2>마이그레이션 단계별 가이드</h2>\n<h3>1) 컴파일러 테스트</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx tsc <span class=\"token parameter variable\">--noEmit</span></code></pre></div>\n<p>위 명령으로 파일을 컴파일하며 오류를 해결합니다.\n--noEmit옵션으로 타입검사 만을 수행합니다.</p>\n<h3>2) 빌드 스크립트 수정</h3>\n<ul>\n<li><code class=\"language-text\">package.json</code> 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>   \n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>     \n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>     \n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node dist/index.js\"</span><span class=\"token punctuation\">,</span>     \n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev --respawn src/index.ts\"</span>   \n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>3) 코드 수정 및 타입 추가</h3>\n<ul>\n<li><strong><code class=\"language-text\">any</code> 남용 지양</strong></li>\n<li><strong>타입 가드</strong> 활용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> x <span class=\"token keyword\">is</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>   \n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>주요 고려사항 및 팁</h2>\n<ul>\n<li><strong><code class=\"language-text\">strictNullChecks</code></strong>: 널 안전성을 확보하려면 반드시 활성화</li>\n<li><strong><code class=\"language-text\">esModuleInterop</code></strong>: CommonJS 모듈과의 호환성</li>\n<li><strong>파일간 순환 참조</strong>: 타입만 분리된 <code class=\"language-text\">*.d.ts</code>로 순환 방지</li>\n<li><strong><code class=\"language-text\">skipLibCheck</code></strong>: 빌드 속도 vs. 타입 안전성 균형</li>\n<li><strong>점진적 마이그레이션</strong>: 작은 단위로 PR 생성, 코드 리뷰 강화</li>\n</ul>\n<hr>\n<h2>결론</h2>\n<p>위 단계들을 적용하며 파일을 하나씩 typescript로 변환하면, 큰 오류 없이 모든 파일을 typescript로</p>","frontmatter":{"date":"June 01, 2025","title":"Javascript에서 Typescript로의 마이그레이션"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%99%9C-typescript%EC%9D%B8%EA%B0%80\">왜 TypeScript인가?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%82%AC%EC%A0%84-%EC%A4%80%EB%B9%84\">사전 준비</a></p>\n</li>\n<li>\n<p><a href=\"#code-classlanguage-texttsconfigjsoncode-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\"><code class=\"language-text\">tsconfig.json</code> 설정하기</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%90%EC%A7%84%EC%A0%81-%ED%8C%8C%EC%9D%BC-%ED%99%95%EC%9E%A5%EC%9E%90-%EB%B3%80%EA%B2%BD\">점진적 파일 확장자 변경</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%EB%8B%A8%EA%B3%84%EB%B3%84-%EA%B0%80%EC%9D%B4%EB%93%9C\">마이그레이션 단계별 가이드</a></p>\n<ul>\n<li><a href=\"#1-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%ED%85%8C%EC%8A%A4%ED%8A%B8\">1) 컴파일러 테스트</a></li>\n<li><a href=\"#2-%EB%B9%8C%EB%93%9C-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%88%98%EC%A0%95\">2) 빌드 스크립트 수정</a></li>\n<li><a href=\"#3-%EC%BD%94%EB%93%9C-%EC%88%98%EC%A0%95-%EB%B0%8F-%ED%83%80%EC%9E%85-%EC%B6%94%EA%B0%80\">3) 코드 수정 및 타입 추가</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A3%BC%EC%9A%94-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD-%EB%B0%8F-%ED%8C%81\">주요 고려사항 및 팁</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"id":"96b0d1ff-1e47-515c-97eb-905a0f9cb733","frontmatter__slug":"/blog/codit/typescript","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}