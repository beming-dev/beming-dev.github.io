{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/codit/sql/","result":{"data":{"markdownRemark":{"html":"<h1>문제 상황</h1>\n<p>뉴스 알림을 보내는 기능은, 코딧 서비스에서 중요한 역할을 합니다.</p>\n<p>그 중에는 다음과 같은 로직이 있었습니다.\n(실제 사용되는 코드이므로, 코드는 매우 단순화 하였습니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token function\">discoverNotification</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> shopId<span class=\"token punctuation\">,</span> <span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> datum <span class=\"token keyword\">of</span> retdata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Models<span class=\"token punctuation\">.</span><span class=\"token function\">writeNotification</span><span class=\"token punctuation\">(</span>\n\t\tuserId<span class=\"token punctuation\">,</span>\n\t\tshopId<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> retdata<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token function\">writeNotification</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token parameter\">userId<span class=\"token punctuation\">,</span>\n\tshopId<span class=\"token punctuation\">,</span>\n\t<span class=\"token operator\">/</span><span class=\"token operator\">...</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\t\tINSERT INTO </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>table<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (\n\t\tuserId,\n\t\tshopId,\n\t\t...\n\t\t\\`order\\`\n\t\t) VALUES (\n\t\t'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">',\n\t\t'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>shopId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">',\n\t\t//...\n\t\t)\n\t</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>query <span class=\"token operator\">&amp;&amp;</span> query<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>results<span class=\"token punctuation\">,</span> metadata<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드에서는 데이터 하나당 반복문을 돌며 DB에 값을 넣어주고 있습니다.\n실제로 코드를 짜다보면, 여러 데이터를 반복문으로 돌며 DB에 넣어주는 로직을 짜는 경우가 자주 생깁니다.</p>\n<h1>어떤 문제가 있을까요?</h1>\n<p>위 상황에서는 다음과 같은 문제가 발생할 수 있습니다.</p>\n<ol>\n<li>for 루프 안에서 await를 사용합니다. 알림 개수가 많아지면 전체 실행 시간이 정비례하여 증가합니다.</li>\n<li>개별 INSERT마다 DB와의 연결이 필요하고, 네트워크 전송이 필요하므로 네트워크가 병목되고 DB 트랜잭션 관리 부담도 커집니다.</li>\n<li>동시에 DB로 여러 요청이 갈 경우 connection pool이 금방 소진됩니다.</li>\n</ol>\n<p>2번 문제는 설정에 따라 매번 새 connection이 생기지는 않을 수 있지만, DB가 새 쿼리를 받을 때마다 쿼리 파싱, 계획 수립 비용이 생기고 네트워크 병목이 일어나게 됩니다.</p>\n<h1>Bulk Insert를 사용한 해결</h1>\n<p>MySQL은 여러 레코드를 한번의 쿼리로 DB에 넣을 수 있는 Bulk Insert를 제공합니다.</p>\n<p>대충 아래와 같은 형태입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> notifications<span class=\"token punctuation\">(</span>\bfield1<span class=\"token punctuation\">,</span> field2<span class=\"token punctuation\">,</span> field3<span class=\"token punctuation\">,</span> field4<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">'u1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">'u2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">'u3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런 쿼리를 만들어주기 위해서는, 데이터를 위의 형태로 파싱해줘야 합니다.</p>\n<p>javascript에서는 아래와 같이 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> insertValues <span class=\"token operator\">=</span> insertList\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(\n\t'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">',\n\t'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>shopId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">',\n\t'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>country<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">',\n\t'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">',\n\t'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>uniqId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'\n\t)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 해주면 Values에 들어갈 형태의 데이터가 만들어집니다.\n이제, 이걸 사용해서 하나의 쿼리를 만들어주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nINSERT INTO </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>table<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (\nuserId,\nshopId,\ncountry,\ntype,\nnumber,\n) VALUES\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>insertValues<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Bulk insert의 이점, 시간 단축</h1>\n<p>여러번 날리던 쿼리를 이렇게 하나의 쿼리로 처리하면 다음과 같은 이점이 있습니다.</p>\n<ol>\n<li>네트워크 왕복 지연 감소</li>\n<li>DB엔진의 쿼리 처리 비용 감소</li>\n<li>트랜잭션 오버헤드 감소</li>\n</ol>\n<p>이 외에도 락, 디스크 효율등 다양한 이점을 가지고 있습니다.</p>\n<p>그럼 실제로 얼마만큼 효율이 좋아졌을까요?\n시간을 확인해보기 위해, 모든 데이터를 기록할 때까지의 시간을 console.time으로 찍어보았습니다.</p>\n<p>제가 사용한 코드에서 기존에는 50개의 데이터를 반복문으로 돌며 insert 해줬습니다.\n아래는 시간을 찍어보며 테스트 한 결과입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">default: 1.528s\ndefault: 1.521s\ndefault: 1.594s\ndefault: 1.660s\ndefault: 1.393s\ndefault: 1.468s\ndefault: 1.561s\ndefault: 1.445s\ndefault: 1.387s\ndefault: 1.370s\ndefault: 1.238s\ndefault: 1.473s</code></pre></div>\n<p>데이터를 확인해보면 평균 1.5s가 소요되는 것을 확인할 수 있습니다.</p>\n<p>이제 bulk insert를 적용한 시간을 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">default: 488.031ms\ndefault: 469.722ms\ndefault: 353.171ms\ndefault: 369.206ms\ndefault: 625.083ms\ndefault: 414.684ms\ndefault: 729.071ms\ndefault: 363.519ms\ndefault: 435.876ms\ndefault: 368.932ms\ndefault: 535.38ms\ndefault: 348.015ms\ndefault: 368.04ms\ndefault: 455.504ms</code></pre></div>\n<p>평균적으로 500ms가 소요되는 것을 확인해볼 수 있습니다.</p>\n<p>약 1/3의 시간이 줄었습니다. 한번에 처리하는 데이터의 양이 많아지면 더 큰 효과를 느릴 수 있을것이란걸 기대해볼 수 있습니다.</p>\n<h1>Bulk insert의 단점</h1>\n<p>물론 장점만 있는것은 아닙니다.</p>\n<ol>\n<li>단일 쿼리가 너무 커지면 패킷 크기 제한, 메모리 부족 등 문제 발생</li>\n<li>하나의 레코드에 에러가 나면 전체 쿼리 롤백</li>\n<li>롤백 비용이 커짐</li>\n</ol>\n<p>이러한 문제들이 있는데, 이 문제들은 간단히 해결이 가능합니다.</p>\n<h1>Bulk insert 개선</h1>\n<p>먼저, 단일 쿼리가 너무 커지면 패킷 크기 제한에 걸리거나 메모리가 부족하거나 롤백 비용이 커지는 문제는 어떻게 해결할까요?</p>\n<p>당연히 단일 쿼리의 크기를 줄이면 됩니다!</p>\n<p>적절한 크기로 Batch 사이즈를 나누고 시스템 자원을 고려해 수백~수천개씩 bulk insert를 날리면 됩니다.</p>\n<hr>\n<p>다음으로, 하나의 레코드에 에러가 나면 전체 쿼리가 롤백되는 문제는 어떻게 해결할까요?\n물론 요구사항에 따라, 전체를 롤백해야 할 수 있습니다.</p>\n<p>하지만 저의 경우는 문제가 있는 데이터는 삽입하지 않고, 나머지는 정상적으로 삽입되길 바랐습니다.</p>\n<p>이 경우, INSERT에 IGNORE 값을 주면 됩니다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nINSERT IGNORE INTO </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>table<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (\nuserId,\nshopId,\ncountry,\ntype,\nnumber,\n) VALUES\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>insertValues<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>INSERT IGNORE 구문은, 삽입 중 발생하는 경고 수준의 에러는 무시합니다.\n중복 키 충돌과 같은 문제는 무시하고 삽입을 진행합니다.</p>\n<p>혹은 ON DUPLICATE KEY 옵션을 줄 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nINSERT IGNORE INTO </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>table<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (\nuserId,\nshopId,\ncountry,\ntype,\nnumber,\n) VALUES\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>insertValues<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\nON DUPLICATE KEY UPDATE\n  userId = VALUES(name);\n  ...\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>요구사항에 맞게 적절히 사용하면 됩니다.</p>","frontmatter":{"date":"July 13, 2025","title":"Bulk insert를 이용한 MySQL 쿼리 최적화"},"tableOfContents":"<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9\">문제 상황</a></li>\n<li><a href=\"#%EC%96%B4%EB%96%A4-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EC%9D%84%EA%B9%8C%EC%9A%94\">어떤 문제가 있을까요?</a></li>\n<li><a href=\"#bulk-insert%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%95%B4%EA%B2%B0\">Bulk Insert를 사용한 해결</a></li>\n<li><a href=\"#bulk-insert%EC%9D%98-%EC%9D%B4%EC%A0%90-%EC%8B%9C%EA%B0%84-%EB%8B%A8%EC%B6%95\">Bulk insert의 이점, 시간 단축</a></li>\n<li><a href=\"#bulk-insert%EC%9D%98-%EB%8B%A8%EC%A0%90\">Bulk insert의 단점</a></li>\n<li><a href=\"#bulk-insert-%EA%B0%9C%EC%84%A0\">Bulk insert 개선</a></li>\n</ul>"}},"pageContext":{"id":"767f9de7-7bf9-5073-8888-e77d77f73cbc","frontmatter__slug":"/blog/codit/sql","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}