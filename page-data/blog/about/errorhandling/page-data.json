{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/about/errorhandling/","result":{"data":{"markdownRemark":{"html":"<h1>Nest.js의 Exception filters</h1>\n<p>Nest.js는 내부적으로 build-in exceptions layer를 가집니다. 발생한 예외가 application code에서 처리되지 않으면, exceptions layer로 넘어간 후 처리됩니다.\n이 때, 에러가 HttpException 혹은 HttpException을 상속한다면 해당 에러에 맞게 응답을 전송하고, 그 외의 경우는 아래와 같은 응답을 보냅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"statusCode\"</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Internal server error\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서 CustomError를 정의하고 싶다면 아래와 같이 HttpException을 상속 받아 정의하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ForbiddenException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Forbidden'</span><span class=\"token punctuation\">,</span> HttpStatus<span class=\"token punctuation\">.</span><span class=\"token constant\">FORBIDDEN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러나 Nest.js에는 미리 정의된 Exception이 @nestjs/common package에 정의돼 있습니다. 상황에 맞게 잘 사용하면 좋습니다.</p>\n<h1>Nest.js에서 에러 로깅하기</h1>\n<p>Nest.js는 HttpException Type의 오류를 자연스러운 앱의 흐름으로 보기 때문에, 따로 로깅을 하지 않습니다. 따라서 HttpException Type의 error를 로깅하기 위해선, 직접 HttpExceptionFilter를 작성해줘야 합니다.\nNest.js는 Exception Filter라는 예외 발생 시 동작하는 Filter를 제공합니다.</p>\n<p>저는 다음과 같이 ExceptionFilter를 작성했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Catch</span></span><span class=\"token punctuation\">(</span>HttpException<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpExceptionFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ExceptionFilter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Inject</span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">WINSTON_MODULE_PROVIDER</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> logger<span class=\"token operator\">:</span> LoggerService<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>exception<span class=\"token operator\">:</span> HttpException<span class=\"token punctuation\">,</span> host<span class=\"token operator\">:</span> ArgumentsHost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> host<span class=\"token punctuation\">.</span><span class=\"token function\">switchToHttp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">getResponse</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">getRequest</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Request<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> status <span class=\"token operator\">=</span> exception<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      statusCode<span class=\"token operator\">:</span> status<span class=\"token punctuation\">,</span>\n      timestamp<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      path<span class=\"token operator\">:</span> request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>큰 기능은 없지만 winston logger를 이용해 logging 기능을 추가해줬습니다.</p>\n<p>필터를 전역에 적용하기 위해 app.module.ts에 해당 Exception Filter를 추가해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> provide<span class=\"token operator\">:</span> <span class=\"token constant\">APP_FILTER</span><span class=\"token punctuation\">,</span> useClass<span class=\"token operator\">:</span> HttpExceptionFilter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h1>Winston을 이용한 logging</h1>\n<p>위의 코드에서 Logger로 Winston Logger를 사용했습니다.\nconsole.log 대신 winston을 선택한 이유가 몇가지 있습니다.</p>\n<ol>\n<li>Log level 관리. console.log에서는 console.log, console.error, console.warn 등을 따로 써야하지만, winston에서는 따로 처리하지 않아도 됩니다.</li>\n<li>자동으로 logging된 시간이 기록됩니다. 로그 분석시 매우 유용합니다.</li>\n<li>Winston은 log 포맷을 지정할 수 있습니다. ELK에서 로그를 관리할 때, 이런 포맷이 지정돼있는 형태가 유리합니다.</li>\n</ol>\n<p>저는 winston에 간단한 설정을 추가해 로그를 json 형태로 관리할 예정입니다.\nmain.ts에 다음과 같은 설정을 추가해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NestFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    abortOnError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    bodyParser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    rawBody<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    logger<span class=\"token operator\">:</span> WinstonModule<span class=\"token punctuation\">.</span><span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">winston</span><span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span><span class=\"token function\">Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> format<span class=\"token operator\">:</span> winston<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 아래와 같이 일관된 json 형태로 로깅이됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\"context\":\"ExceptionsHandler\",\"level\":\"error\",\"message\":\"no token\",\"stack\":[null]}\n{\"context\":\"RouterExplorer\",\"level\":\"info\",\"message\":\"Mapped {/vote2/test, GET} route\"}</code></pre></div>","frontmatter":{"date":"February 15, 2025","title":"Nest.js는 어떻게 Error Handling을 할까?"},"tableOfContents":"<ul>\n<li><a href=\"#nestjs%EC%9D%98-exception-filters\">Nest.js의 Exception filters</a></li>\n<li><a href=\"#nestjs%EC%97%90%EC%84%9C-%EC%97%90%EB%9F%AC-%EB%A1%9C%EA%B9%85%ED%95%98%EA%B8%B0\">Nest.js에서 에러 로깅하기</a></li>\n<li><a href=\"#winston%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-logging\">Winston을 이용한 logging</a></li>\n</ul>"}},"pageContext":{"id":"d3ae7c8b-35e1-573c-bed4-7820ba2d8a7a","frontmatter__slug":"/blog/about/errorhandling","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}