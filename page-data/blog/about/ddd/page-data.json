{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/about/ddd/","result":{"data":{"markdownRemark":{"html":"<p>최근 About 프로젝트에 클린 아키텍처를 도입하고 있습니다.</p>\n<p>서비스를 Controller, Service, Entity, Repository 정도의 경계로 나누고, 고수준 모듈이 저수준 모듈을 참조하는 (Service에서 Repository를 호출하는) 경우는 interface를 정의하여 의존성을 방향을 제어하도록 구현하고 있습니다.\n![[Pasted image 20250627113727.png]]</p>\n<p>위 도식에서 추가로 외부에 의존해야 하는게 필요하다면 (ex. 결제 api), interface를 정의해서 interface에만 의존하는 방식으로 구현중에 있습니다.</p>\n<p>여기서 DB의존성 제거를 위해 Repository를 분리하기 위해서는, 도메인 엔티티를 정의해야 합니다. 그렇지 않고 DB 스키마를 사용하게 된다면, 완전한 DB의 분리가 이루어졌다고 보기 어렵습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<h1>도메인 주도 개발</h1>\n<p>먼저, 도메인이란 \"<b>소프트웨어가 해결하고자 하는 문제 영역</b>\" 입니다.\n예를 들어, 은행 앱의 도메인을 설계 한다면, 아래와 같은 것들이 도메인이 될 수 있습니다.</p>\n<ul>\n<li>계좌 정보</li>\n<li>고객 정보</li>\n<li>은행 상품\n도메인은 서비스를 운영한다면 필수적으로 존재하게 되는데, 개발자로서 우리는 이를 소프트웨어적으로 구현해야 하므로 <b>도메인 모델</b>을 설계해야 합니다.\n설계 방식에 제약은 없지만 주로 객체를 이용해 설계하는 것이 일반적입니다.</li>\n</ul>\n<h1>설계</h1>\n<p>먼저 일반적으로 생각했을 때, 해결하려는 하나의 문제가 존재할 것이고, 그 문제를 위해 필요한 엔티티가 여러개 있을 것입니다. 이 하나의 문제를 도메인이라 부릅시다.</p>\n<p>도메인을 해결하기 위해서는 여러 엔티티들이 상호작용 해야합니다. 이 수많은 엔티티들 중에는 서로 연관된 것들이 존재합니다. 이런 엔티티를 묶은것을 <b>애그리거트 (Aggregate)</b>라고 부릅시다. 하나의 애그리더트는 <b>애그리거트 루트</b>를 가지고 여러 하위 엔티티를 포함합니다.</p>\n<p>예를 들어, 은행 상품 이라는 애그리거트를 설계한다고 생각해봅시다. 하위에</p>\n<hr>\n<h3>Aggregate 1: Catalog</h3>\n<ul>\n<li>Entity1: Product: 상품코드, 이름, 설명</li>\n<li>Entity2: Category: 카테고리 이름, 카테고리 코드</li>\n<li>Entity3: Attribute: 최고한도, 최저예치금</li>\n</ul>\n<hr>\n<h3>Aggregate2: Definition</h3>\n<ul>\n<li>Entity1: RatePlan: 연이율, 적용기간, 변동금리/고정금리</li>\n<li>Entity2: Fee: 수수료 유형, 금액, 비율</li>\n</ul>\n<hr>\n<p>다음과 같은 Aggregate, Entity가 생성될 것입니다.</p>\n<h1>Entity와 Value Object</h1>\n<p>Entity는 고유한 식별자를 가지고, LifeCycle동안 동일성을 유지해야 합니다.\n반면, Value Object는 식별자가 없고, 값 자체로 동일성을 판단합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 식별자</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Email</span> email<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// VO 참조</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@ValueObject</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Email</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Email</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>address<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".+@.+\\\\..+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"유효하지 않은 이메일\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>엔티티와 Value Object를 구분함으로서, 도메인 모델의 의도를 분명하게 드러낼 수 있습니다.</p>\n<p>Entity의 안에는 비즈니스 규칙에 따라 상태가 바뀌는 로직이 들어가고, Value Object는 불변으로 설계하여, 변경이 필요하면 새로운 인스턴스를 생성하여 Side-Effect를 차단할 수 있습니다.</p>\n<h2>불변성</h2>\n<p>DDD에서 왜 불변성을 챙겨야 할까요?</p>\n<p>불변성을 적용하면 다음과 같은 이점을 얻을 수 있습니다.</p>\n<ul>\n<li>멀티스레드 환경에서 동시성 이슈 감소</li>\n<li>사이드 이펙트를 방지하여 예측 가능한 동작 보장</li>\n<li>단위 테스트에서 상태 설정이 간단해짐</li>\n</ul>\n<p>아래에서 Money를 불변성을 가진 Value Object로 설계해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Money</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">BigDecimal</span> amount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> currency<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span> amount<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> currency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currency <span class=\"token operator\">=</span> currency<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Money</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span> amount<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> currency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">.</span><span class=\"token function\">signum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"금액은 음수일 수 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 불변 연산: 새 객체를 반환</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Money</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Money</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currency<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>currency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"통화 단위가 다릅니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Getter만 제공</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BigDecimal</span> <span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> amount<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> currency<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드를 보면, Money 객체에는 내부 필드를 외부에서 조작할 수 있는 set 메서드를 제공하지 않습니다.</p>\n<p>유일하게 Money를 변경할 수 있는건 외부에 노출된 add 뿐입니다. 그러나 add 메서드 역시 내부 상태 변경을 허용하지 않고 새로운 Money 객체를 반환합니다.</p>\n<h1>Entity, VO, 불변성</h1>\n<p>Entity와 VO, 불변성은 함께 사용하면 시너지 효과를 얻을 수 있습니다.</p>\n<ol>\n<li>도메인의 의도 명확화\nVO를 통해 핵심 값의 비즈니스 규칙을 캡슐화 하고, Entity는 식별과 참조 역할에만 집중합니다.</li>\n<li>안정적 모델 유지\nVO에 불변성을 적용하면, Entity 내부의 VO가 의도치 않게 변형되는걸 방지합니다. 따라서 복잡한 트랜잭션, 이벤트에서 안정성이 확보됩니다.</li>\n<li>테스트 용이성\nVO 단위 테스트로 값 검사 로직을 검증하면, Entity의 단위 테스트에서 VO의 생성이 보장됩니다.</li>\n</ol>\n<p>아래에서 간단한 예시를 확인해봅시다.</p>\n<p>먼저, Money 객체에 값 검사 로직을 추가해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Money</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">BigDecimal</span> amount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> currency<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span> amount<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> currency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currency <span class=\"token operator\">=</span> currency<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Money</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span> amount<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> currency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">.</span><span class=\"token function\">signum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"금액은 음수일 수 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Money</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Money</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">verifySameCurrency</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Money</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>quantity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"수량은 음수일 수 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">verifySameCurrency</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Money</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currency<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>currency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"통화가 다릅니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BigDecimal</span> <span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> amount<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> currency<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* address equality */</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* based on amount &amp; currency */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 이 VO를 Order 객체에서 사용해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Entity: Order</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> customerId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderLine</span><span class=\"token punctuation\">></span></span> lines <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> customerId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>customerId <span class=\"token operator\">=</span> customerId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Money</span> lineTotal <span class=\"token operator\">=</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lines<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderLine</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> lineTotal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 전체 주문 금액 계산</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Money</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderLine</span><span class=\"token operator\">::</span><span class=\"token function\">getLineTotal</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Money</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ZERO</span><span class=\"token punctuation\">,</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLineTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">Money</span><span class=\"token operator\">::</span><span class=\"token function\">add</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// OrderLine 내부 클래스</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderLine</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Long</span> productId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Money</span> lineTotal<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// VO</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderLine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> productId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Money</span> lineTotal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>productId <span class=\"token operator\">=</span> productId<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">=</span> quantity<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lineTotal <span class=\"token operator\">=</span> lineTotal<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Money</span> <span class=\"token function\">getLineTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> lineTotal<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>위 예에서 Money는 불변 VO이고, Order Entity는 내부의 OrderLine(주문 상품들) 에서 Money를 가집니다.</p>\n<ul>\n<li>Money(VO) 가 금액 계산, 검증 역할을 전담합니다. 따라서 Order는 주문 로직에만 집중할 수 있습니다.</li>\n<li>Money가 불변 객체이므로, 한번 생성된 금액 정보는 절대 변경되지 않습니다.</li>\n<li>Money의 단위 테스트에서 덧셈, 곱셈, 통화 검증이 완료되면, Order의 단위 테스트에서는 addLine과 totalAmount의 검증만 완료되면 됩니다.</li>\n</ul>\n<p>이런 이유로 도메인 주도 개발을 할 때에는 Entity, VO, 불변성 개념을 잘 알고 있는것이 도움이 됩니다.</p>","frontmatter":{"date":"July 28, 2025","title":"도메인 주도 개발(DDD)을 적용해보자"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C\">도메인 주도 개발</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%84%A4%EA%B3%84\">설계</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#aggregate-1-catalog\">Aggregate 1: Catalog</a></li>\n<li><a href=\"#aggregate2-definition\">Aggregate2: Definition</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#entity%EC%99%80-value-object\">Entity와 Value Object</a></p>\n<ul>\n<li><a href=\"#%EB%B6%88%EB%B3%80%EC%84%B1\">불변성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#entity-vo-%EB%B6%88%EB%B3%80%EC%84%B1\">Entity, VO, 불변성</a></p>\n</li>\n</ul>"}},"pageContext":{"id":"89445d0d-e642-5cf6-9c22-e321d46a3556","frontmatter__slug":"/blog/about/ddd","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}