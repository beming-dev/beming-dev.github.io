{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/about/error/","result":{"data":{"markdownRemark":{"html":"<p>다음 <a href=\"https://expressjs.com/en/guide/error-handling.html\">Express.js 공식문서</a> 를 참고하여 작성하였습니다.</p>\n<h1>Express.js는 어떻게 Error Handling을 할까?</h1>\n<p>Express.js에는 default error handler가 있습니다. 공식 문서에 따르면, 내부적으로 error가 발생하면 다음의 정보들을 추가해 클라이언트로 전송합니다.</p>\n<ul>\n<li>res.statusCode: err.status의 값으로 설정됩니다.</li>\n<li>res.statusMessage: statusCode에 따라 설정됩니다.</li>\n<li>body: HTML 형식의 status code message</li>\n<li>err.headers object에 정의된 header</li>\n</ul>\n<p>만약 에러가 발생할 때 next() 에 아무 매개변수나 넘겨주면 Express가 에러라 판단하고 error handler로 보냅니다.</p>\n<p>Express4 까지는 비동기에서 발생한 에러는 따로 처리 해줘야 했지만, Express5부터는 비동기에서 발생한 에러도 자동으로 next(err)를 호출해주기 때문에 따로 처리할 필요가 없습니다.</p>\n<h1>Custom Error Handler는 어떻게 만들까?</h1>\n<p>Custom Error Handler를 만들 땐, 기존 middleware 형식에 (err, req, res, next) 이렇게 4개의 인자를 넘겨주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something broke!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Express.js는 정의된 middleware와 route를 순차적으로 처리합니다.\n다음과 같이 맨 마지막에 Error handler를 정의해야 오류를 처리할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setupRoutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 라우터 설정</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>ErrorHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h1>왜 Custom Error Handler를 만들게 되었을까?</h1>\n<p>제가 기존에 정의해둔 Error Handler는 Express의 default error handler와 크게 다른게 없었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NextFunction<span class=\"token punctuation\">,</span> Request<span class=\"token punctuation\">,</span> Response <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span>\n\n  \n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ErrorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">err</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span>\n  req<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span>\n  res<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">,</span>\n  next<span class=\"token operator\">:</span> NextFunction<span class=\"token punctuation\">,</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Middleware Error Handling\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> errStatus <span class=\"token operator\">=</span> err<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">||</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> errMsg <span class=\"token operator\">=</span> err<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> <span class=\"token string\">\"Something went wrong\"</span><span class=\"token punctuation\">;</span>\n  \n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>errStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> errStatus<span class=\"token punctuation\">,</span>\n\t  <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> errMsg<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">stack</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"development\"</span> <span class=\"token operator\">?</span> err<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ErrorHandler<span class=\"token punctuation\">;</span></code></pre></div>\n<p>단순히 logging을 하고, 클라이언트로 에러를 보내는 형식입니다.</p>\n<p>이 방식을 사용할 때는 다음과 같은 문제가 있었습니다.</p>\n<ol>\n<li>어떤 Error인지 구분되지 않습니다. Validation과정에서 발생한 에러인지, Database에서 발생한 에러인지 구분이 가능하다면 더 빠른 대처가 가능할 것입니다.</li>\n<li>예상한 예외에서 발생한 에러인지, 예기치 않게 발생한 에러인지 구분되지 않습니다. 에러처리가 된 곳에서 발생한 에러가 아닌 것을 따로 처리하여 앱의 안정성을 높이고 싶었습니다.</li>\n</ol>\n<p>이를 해결하기 위해 다음과 같은 Error Handler를 정의했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NextFunction<span class=\"token punctuation\">,</span> Request<span class=\"token punctuation\">,</span> Response <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ErrorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">err</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span>\n  req<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span>\n  res<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">,</span>\n  next<span class=\"token operator\">:</span> NextFunction<span class=\"token punctuation\">,</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>isOperational<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      message<span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>errors <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">errors</span><span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>errors <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected Error: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      message<span class=\"token operator\">:</span> <span class=\"token string\">\"An unexpected error occured\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ErrorHandler<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Custom Error Type을 정의한 후, error에 isOperational 맴버를 추가하여 예상한 오류인지 구분해줍니다. 또한 각각의 Custom Error에서 status코드를 지정해줄겁니다.</p>\n<p>아래는 직접 정의한 AppError입니다. 이 AppError를 상속받는 Error들을 만들어줄 겁니다. 그럼 그 Error들은 isOperational 필드를 가지고, 각각 미리 정의된 status code를 갖게 됩니다.</p>\n<ul>\n<li>AppError</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> readonly statusCode<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> readonly isOperational<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">statusCode</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> statusCode<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isOperational <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  \n    Error<span class=\"token punctuation\">.</span><span class=\"token function\">captureStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예를 들면 아래와 같습니다.</p>\n<ul>\n<li>DatabaseError</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppError <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./AppError\"</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DatabaseError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppError</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"Database error occurred\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ValidationError</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppError <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./AppError\"</span><span class=\"token punctuation\">;</span>\n  \n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValidationError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppError</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> readonly errors<span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">consructor</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"Validation error\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">errors</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>errors <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런 형태로 Custome Error를 지정해주면</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">throw new ValidationErrror();\nnext(new ValidationError());</code></pre></div>\n<p>와 같은 형식으로 사용할 수 있습니다.</p>","frontmatter":{"date":"February 01, 2025","title":"Express.js는 어떻게 Error Handling을 할까?"},"tableOfContents":"<ul>\n<li><a href=\"#expressjs%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-error-handling%EC%9D%84-%ED%95%A0%EA%B9%8C\">Express.js는 어떻게 Error Handling을 할까?</a></li>\n<li><a href=\"#custom-error-handler%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%A7%8C%EB%93%A4%EA%B9%8C\">Custom Error Handler는 어떻게 만들까?</a></li>\n<li><a href=\"#%EC%99%9C-custom-error-handler%EB%A5%BC-%EB%A7%8C%EB%93%A4%EA%B2%8C-%EB%90%98%EC%97%88%EC%9D%84%EA%B9%8C\">왜 Custom Error Handler를 만들게 되었을까?</a></li>\n</ul>"}},"pageContext":{"id":"5a97e18f-294a-53a3-b574-54bff4fbb911","frontmatter__slug":"/blog/about/error","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}