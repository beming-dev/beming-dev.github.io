{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/about/clustering/","result":{"data":{"markdownRemark":{"html":"<h1>왜 clustering 기능이 필요했을까?</h1>\n<p>스터디 매칭기능은 About 프로젝트의 주요 기능중 하나입니다.</p>\n<h2>기존의 방식</h2>\n<p>기존의 스터디 투표에는 다음과 같은 요소가 있었습니다</p>\n<ul>\n<li>1지망, 2지망 선택 가능</li>\n<li>스터디 장소 선택가능</li>\n<li>시간 선택 가능</li>\n</ul>\n<p>이를 지원하기 위해 매칭 알고리즘은 과정을 따랐습니다.</p>\n<ol>\n<li>1지망의 데이터를 대상으로 시간이 겹치는 사람을 탐색</li>\n<li>2시간이상 겹치는 사람이 n명 이상이면, 스터디 상태를 open으로 변경</li>\n<li>1지망 투표에 실패한 사람들 중 open된 장소에 2지망 투표를 한 사람이라면 그곳으로 이동</li>\n<li>스터디 매칭이 완료된 사람과 장소는 제외하고, 매칭이 실패한 장소에서 2지망 투표한 사람들을 대상으로 스터디가 열릴 수 있는지 확인.</li>\n</ol>\n<h1>기존 방식엔 어떤 문제가 있었을까?</h1>\n<p>기존의 스터디 투표 방식에는 아래와 같은 문제들이 있었습니다.</p>\n<ul>\n<li>유저가 1,2지망 장소 시간 등을 선택해야 해서 행동이 많아진다.</li>\n<li>1,2지망이 잘 겹치지 않아 가까운 거리임에도 매칭이 잘 이루어지지 않음</li>\n<li>데이터 구조의 문제이기도 하나, 기존의 데이터 구조에서는 효율적으로 알고리즘을 구현하기가 어려움.</li>\n</ul>\n<p>이에 먼저 유저가 선택해야 할 것들을 줄이고 싶었고, 전체적으로 알고리즘도 수정하고 싶었습니다.</p>\n<h1>DBSCAN 알고리즘을 활용한 알고리즘을 도입하자</h1>\n<p>이런 문제점들을 해결하기 위해 유저에게 위치(위도, 경도)만을 입력받고, 이를 밀도 기반 클러스터링으로 묶은 뒤, 적절한 스터디 장소로 보내는 방식을 채택했습니다.</p>\n<h2>밀도 기반 클러스터링(DBSCAN)</h2>\n<p>다차원 데이터를 기반으로, 가까운 포인트들을 클러스터링하는 알고리즘입니다.</p>\n<p>K-means알고리즘도 고려했으나, cluster될 개수를 미리 정해줘야 한다는 점과, 초기 centroid값을 정해줘야 한다는 점, 결과가 매번 달라진다는 점이 우리의 데이터와 잘 맞지 않는다 생각하여 DBSCAN알고리즘을 선택했습니다.</p>\n<p>DBSCAN알고리즘은 minPts(최소 점의 개수)와 epsilon(반경) 두 가지의 변수를 사용합니다.\n동작 방식을 간단히 설명하면,</p>\n<ol>\n<li>특정 점 A를 중심으로 epsilon 거리 내에 minPts이상의 점들이 존재하면 A를 core point로 판단</li>\n<li>core point끼리 epsilon 거리 내에 있다면 같은 cluster가 된다.</li>\n<li>나머지 점들은 noise point로 판단한다.</li>\n</ol>\n<p>와 같이 동작합니다.</p>\n<h1>적용</h1>\n<p>DBSCAN알고리즘은 \"density-clustering\" 라이브러리를 사용하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">DBSCANClustering</span><span class=\"token punctuation\">(</span>\n    coords<span class=\"token operator\">:</span> coordType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    eps<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">clusters</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> noise<span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">DBSCAN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">clustering<span class=\"token punctuation\">.</span>DBSCAN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  \n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> coords<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> lat<span class=\"token punctuation\">,</span> lon <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>lat<span class=\"token punctuation\">,</span> lon<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">const</span> minPts <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 한 지점 근처에 최소 3개 이상 모여야 클러스터로 인정</span>\n  \n    <span class=\"token keyword\">const</span> clusters <span class=\"token operator\">=</span> <span class=\"token constant\">DBSCAN</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> eps<span class=\"token punctuation\">,</span> minPts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      clusters<span class=\"token punctuation\">,</span>\n      noise<span class=\"token operator\">:</span> <span class=\"token constant\">DBSCAN</span><span class=\"token punctuation\">.</span>noise<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드와 같이 위도, 경도로 구성된 배열 데이터를 만든 다음, DBSCAN알고리즘을 돌려주면 됩니다. cluster 그룹과, noise그룹이 배열 인덱스를 값으로 하는 데이터 구조로 반환됩니다.</p>\n<p>여기서 저희가 설정할 수 있는 것들은, 클러스터의 거리 eps와 최소 점 개수 minPts 두 개 뿐입니다.</p>\n<p>그러나 스터디를 위한 그룹을 만들 때는, 한 카페에 너무 많은 인원이 가는것도 안되므로 최대 인원도 제한해야 합니다. 이를 어떻게 구현할까요?</p>\n<p>방법은 간단합니다. 크기가 큰 그룹을 대상으로 더 작은 eps값을 이용해 DBSCAN 알고리즘을 다시 돌려 쪼개주면 됩니다.</p>\n<p>저는 가장 긴 클러스터가 8이 될때까지 계속 쪼개주도록 반복문을 돌렸습니다.\nDBSCAN알고리즘 관련 코드가 길어져 별도의 ClusterUtils라는 클래스로 분리했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token function\">setResult</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> Date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">participations</span><span class=\"token operator\">:</span> IParticipation<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> \n      <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Vote2Repository<span class=\"token punctuation\">.</span><span class=\"token function\">findParticipationsByDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">coords</span><span class=\"token operator\">:</span> coordType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> participations<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">loc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        lat<span class=\"token operator\">:</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">.</span>latitude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        lon<span class=\"token operator\">:</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">.</span>longitude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token comment\">//시작 거리</span>\n    <span class=\"token keyword\">let</span> eps <span class=\"token operator\">=</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> maxMember <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> clusters<span class=\"token punctuation\">,</span> noise <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ClusterUtils<span class=\"token punctuation\">.</span><span class=\"token function\">DBSCANClustering</span><span class=\"token punctuation\">(</span>coords<span class=\"token punctuation\">,</span> eps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token comment\">//클러스터 결과 8명이 넘는 클러스터가 있을 경우, 더 작게 더 분해.</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ClusterUtils<span class=\"token punctuation\">.</span><span class=\"token function\">findLongestArrayLength</span><span class=\"token punctuation\">(</span>clusters<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> maxMember<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      clusters<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">cluster</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cluster<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> newCoords <span class=\"token operator\">=</span> coords<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">coord<span class=\"token punctuation\">,</span> j</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> cluster<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">clusters</span><span class=\"token operator\">:</span> newClusters<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">noise</span><span class=\"token operator\">:</span> newNoise <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span>\n          ClusterUtils<span class=\"token punctuation\">.</span><span class=\"token function\">DBSCANClustering</span><span class=\"token punctuation\">(</span>newCoords<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>eps <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n        clusters<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newClusters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token comment\">//cluster결과(인덱스)를 실제 데이터로 치환</span>\n    <span class=\"token keyword\">const</span> formedClusters <span class=\"token operator\">=</span> ClusterUtils<span class=\"token punctuation\">.</span><span class=\"token function\">transformArray</span><span class=\"token punctuation\">(</span>\n      clusters<span class=\"token punctuation\">,</span>\n      participations<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">places</span><span class=\"token operator\">:</span> IPlace<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>PlaceRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByStatus</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token comment\">//클러스터링 결과 계산</span>\n    <span class=\"token keyword\">const</span> voteResults <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ClusterUtils<span class=\"token punctuation\">.</span><span class=\"token function\">findClosestPlace</span><span class=\"token punctuation\">(</span>\n      formedClusters<span class=\"token punctuation\">,</span>\n      places<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Vote2Repository<span class=\"token punctuation\">.</span><span class=\"token function\">setVoteResult</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> voteResults<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>while문 외에는 대부분 데이터를 가공하고 DB에 읽고 쓰는 과정이므로, while문 부분만 보면 될 것 같습니다.</p>\n<p><img src=\"images/20241230140929.png\" alt=\"\">\nmock data로 테스트 결과, 다음과 같이 101명의 참여자가 14개의 그룹으로 잘 클러스터링 된 것을 확인할 수 있었습니다.</p>\n<h1>마무리</h1>\n<p>위 알고리즘이 실제 데이터에서 얼마나 잘 작동할지는 앞으로 지켜봐야 합니다.\n그리고 지역마다 eps값을 조정해야 하는 경우도 있을 것 같고, 유저별로 선호하는 거리가 다를 수 있다는 점도 고려해야 할 수 있습니다.</p>","frontmatter":{"date":"January 05, 2025","title":"위도 경도 기반 clustering 알고리즘"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%99%9C-clustering-%EA%B8%B0%EB%8A%A5%EC%9D%B4-%ED%95%84%EC%9A%94%ED%96%88%EC%9D%84%EA%B9%8C\">왜 clustering 기능이 필요했을까?</a></p>\n<ul>\n<li><a href=\"#%EA%B8%B0%EC%A1%B4%EC%9D%98-%EB%B0%A9%EC%8B%9D\">기존의 방식</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B8%B0%EC%A1%B4-%EB%B0%A9%EC%8B%9D%EC%97%94-%EC%96%B4%EB%96%A4-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EC%97%88%EC%9D%84%EA%B9%8C\">기존 방식엔 어떤 문제가 있었을까?</a></p>\n</li>\n<li>\n<p><a href=\"#dbscan-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%84-%EB%8F%84%EC%9E%85%ED%95%98%EC%9E%90\">DBSCAN 알고리즘을 활용한 알고리즘을 도입하자</a></p>\n<ul>\n<li><a href=\"#%EB%B0%80%EB%8F%84-%EA%B8%B0%EB%B0%98-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81dbscan\">밀도 기반 클러스터링(DBSCAN)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%81%EC%9A%A9\">적용</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></p>\n</li>\n</ul>"}},"pageContext":{"id":"86ff0ff6-4db4-57f0-9d2b-5a7b9807dfe5","frontmatter__slug":"/blog/about/clustering","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}