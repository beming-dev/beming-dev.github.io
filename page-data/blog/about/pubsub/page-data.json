{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/about/pubsub/","result":{"data":{"markdownRemark":{"html":"<h1>왜 메시지 큐를 사용해야 할까?</h1>\n<p>About 서비스는 알림을 보내야 하는 다양한 경우가 존재합니다.\n메시지 큐를 사용하지 않고 알림 서비스를 운영하면 다음과 같은 문제가 있을 수 있습니다.</p>\n<ol>\n<li>알림 전송이 끝날 때까지 기다렸다 응답을 보내면, API 응답 속도가 느려진다.</li>\n<li>동시에 많은 요청이 들어오면, 서버의 부하가 증가한다.</li>\n<li>장애 발생 시, 재시도가 어렵다.</li>\n</ol>\n<p>Nest.js API 서버 - Redis 메시지 큐를 분리하면 이러한 문제들을 한번에 해결할 수 있습니다.</p>\n<h1>Redis 서버를 만들어보자</h1>\n<p>Redis 메시지 큐를 분리하기 위해선 먼저 Redis 서버를 따로 가지고 있어야 합니다.\n저는 이전에 생성해두었던 Oracle cloud의 Ubuntu 인스턴스를 사용했습니다.</p>\n<ol>\n<li>Redis 설치</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> redis-server</code></pre></div>\n<ol start=\"2\">\n<li>Redis 설정\nRedis의 설정 파일은 Ubuntu 기준 /etc/redis/redis.conf 에 위치합니다.\n아래 명령으로 설정 파일을 수정합니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo vim /etc/redis/redis.conf</code></pre></div>\n<p>외부 접속을 위한 몇가지 설정을 해줍시다.\n아래의 항목들을 찾거나 추가하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">bind 0.0.0.0\n\nprotected-mode no\n\nrequirepass &lt;your_redis_password></code></pre></div>\n<p>설정이 모두 완료되면, Redis를 재시작하여 설정을 적용해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Ubuntu\nsudo systemctl restart redis-server</code></pre></div>\n<ol start=\"3\">\n<li>추가적으로 Linux의 방화벽 설정, cloud 서비스의 VCN을 업데이트 해줍니다.</li>\n</ol>\n<p>이렇게 완료되었다면 외부에서 Redis에 접속할 수 있게 됩니다.</p>\n<h1>Nest.js에서 Redis를 사용해보자.</h1>\n<p>Nest.js에는 Bull이라는 Redis 기반의 Queue 시스템을 Nest.js에서 간편하게 사용하도록 만든 BullModule이 존재합니다. 이 BullModule을 사용해서 간편하게 메시지 큐 기능을 구현해봅시다.</p>\n<p>먼저, 필요한 라이브러리를 설치해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install @nestjs/bull bull ioredis</code></pre></div>\n<p>Redis를 사용할 Module에 Redis 연결 정보를 입력해줍시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// BullModule 등록</span>\n    BullModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">redis</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">REDIS_HOST</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">REDIS_PORT</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">REDIS_PASSWORD</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    BullModule<span class=\"token punctuation\">.</span><span class=\"token function\">registerQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'webpush'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>이제 메시지 큐에 데이터를 넣을 Producer와 소비할 Consumer를 추가해봅시다.</p>\n<h2>Producer</h2>\n<p>구독 정보와 payload를 메시지 큐에 넘기는 enqueueWebPush 메소드를 작성해줬습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> InjectQueue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/bull\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Queue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"bull\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotificationProducer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">InjectQueue</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webpush\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> webpushQueue<span class=\"token operator\">:</span> Queue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">enqueueWebPush</span><span class=\"token punctuation\">(</span>subscriptions<span class=\"token operator\">:</span> INotificationSub<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webpushQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendWebPush\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      subscriptions<span class=\"token punctuation\">,</span>\n      payload<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Consumer</h2>\n<p>이제 Consumer를 작성해줍시다.</p>\n<ul>\n<li>먼저, Consumer에는 Processor annotation이 필요합니다. 여기에 'webpush'를 넣어주면, \"webpush\" 라는 이름의 큐를 구독하겠다는 의미입니다.</li>\n<li>다음으로 처리 메소드에, Process annotation과 'sendWebPush'값을 넘겨줍니다. sendWebPush라는 이름의 job을 처리하는 메소드라는 의미입니다.</li>\n<li>이 Process는 job이라는 매개변수를 받는데, 여기에 Producer가 넘겨주는 값의 정보가 포함돼 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Processor<span class=\"token punctuation\">,</span> Process <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/bull\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Job <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"bull\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> PushNotifications <span class=\"token keyword\">from</span> <span class=\"token string\">\"node-pushnotifications\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Processor</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webpush\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebPushConsumer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> push<span class=\"token operator\">:</span> PushNotifications<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>push <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PushNotifications</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      web<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* ...vapid 설정... */</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      android<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> priority<span class=\"token operator\">:</span> <span class=\"token string\">\"high\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      isAlwaysUseFCM<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Process</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendWebPush\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">handleSendWebPush</span><span class=\"token punctuation\">(</span>job<span class=\"token operator\">:</span> Job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> subscriptions<span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> job<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>\n        subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>메시지 큐가 잘 동작하고 있는지 확인해보자</h1>\n<p>먼저 Redis가 실행중인 인스턴스에서 다음 명령으로 Redis에 접속해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">redis-cli <span class=\"token parameter variable\">-h</span> <span class=\"token operator\">&lt;</span>REDIS_HOST<span class=\"token operator\">></span> <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">&lt;</span>REDIS_PORT<span class=\"token operator\">></span> <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>PASSWORD<span class=\"token operator\">></span></code></pre></div>\n<p>접속에 성공했다면, 생성된 Key 목록을 확인해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">KEYS bull:webpushQueue:*</code></pre></div>\n<p>저는 다음과 같은 결과를 확인할 수 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">xxx.xx.xx.xx:6379> KEYS bull:webpushQueue:*\n(empty list or set)\n144.24.95.17:6379> KEYS *\n 1) \"bull:webpushQ:1030\"\n 2) \"bull:webpushQ:1062\"\n 3) \"bull:webpushQ:1047\"\n 4) \"bull:webpushQ:1031\"\n 5) \"bull:webpushQ:3\"\n 6) \"bull:webpushQ:failed\"\n ...</code></pre></div>\n<p>메시지 큐에 Key가 잘 생성되고 있고, 알림이 정상적으로 전송되고 있는걸 확인했습니다.</p>","frontmatter":{"date":"March 05, 2025","title":"Redis 와 Bull을 이용한 메시지 큐 기능 사용.md"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%99%9C-%EB%A9%94%EC%8B%9C%EC%A7%80-%ED%81%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\">왜 메시지 큐를 사용해야 할까?</a></p>\n</li>\n<li>\n<p><a href=\"#redis-%EC%84%9C%EB%B2%84%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90\">Redis 서버를 만들어보자</a></p>\n</li>\n<li>\n<p><a href=\"#nestjs%EC%97%90%EC%84%9C-redis%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90\">Nest.js에서 Redis를 사용해보자.</a></p>\n<ul>\n<li><a href=\"#producer\">Producer</a></li>\n<li><a href=\"#consumer\">Consumer</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A9%94%EC%8B%9C%EC%A7%80-%ED%81%90%EA%B0%80-%EC%9E%98-%EB%8F%99%EC%9E%91%ED%95%98%EA%B3%A0-%EC%9E%88%EB%8A%94%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EC%9E%90\">메시지 큐가 잘 동작하고 있는지 확인해보자</a></p>\n</li>\n</ul>"}},"pageContext":{"id":"cea4622b-fe74-54d0-a7a5-4d3b4ae675d0","frontmatter__slug":"/blog/about/pubsub","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}