{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/algorithm/clock/","result":{"data":{"markdownRemark":{"html":"<h1>문제</h1>\n<p><img src=\"../_resources/%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-1.png\" alt=\"다운로드.png\"></p>\n<h1>풀이</h1>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#define MAX 987654321\n\nusing namespace std;\n\nint connected[10][5] = {\n    {0, 1, 2, -1, -1},\n    {3, 7, 9, 11, -1},\n    {4, 10, 14, 15, -1},\n    {0, 4, 5, 6, 7},\n    {6, 7, 8, 10, 12},\n    {0, 2, 14, 15, -1},\n    {3, 14, 15, -1, -1},\n    {4, 5, 7, 14, 15},\n    {1, 2, 3, 4, 5},\n    {3, 4, 5, 9, 13}\n};\n\nbool isDone(int* clocks) {\n    for (int i = 0; i &lt; 16; i++) {\n        if (clocks[i] != 12) return false;\n    }\n    return true;\n}\n\nint countCnt(int* runCnt) {\n    int sum = 0;\n    for (int i = 0; i &lt; 16; i++) {\n        sum += runCnt[i];\n    }\n    return sum;\n}\n\nvoid turn(int* clocks, int connectNum, int dir) {\n    for (int i = 0; i &lt; 5; i++) {\n        int clockNum = connected[connectNum][i];\n        if (clockNum != -1) {\n            clocks[clockNum] = (clocks[clockNum] + (3 * dir));\n            if (clocks[clockNum] == 15) clocks[clockNum] = 3;\n            else if (clocks[clockNum] == 0) clocks[clockNum] = 12;\n        }\n    }\n}\n\nint runrun(int swtch) {\n    if (swtch == 10)\n    {\n        return isDone(clocks) ? 0 : MAX;\n    }\n\n    int result = MAX;\n\n    for (int i = 0; i &lt; 4; i++) {\n        result = min(result, i + runrun(swtch + 1));\n        turn(clocks, swtch, 1);\n    }\n    /*for (int i = 0; i &lt; 10; i++) {\n        if (runCnt[i] &lt; 3) {\n            runCnt[i]++;\n            turn(clocks, i, 1);\n            result = min(runrun(runCnt), result);\n\n            turn(clocks, i, -1);\n            runCnt[i]--;\n        }\n    }*/\n\n    return result;\n}\n\nint main(void)\n{\n    int x;\n    int runCnt[16] = { 0, };\n\t\tint clocks[16];\n\n    for (int i = 0; i &lt; 16; i++) {\n        cin &gt;&gt; x;\n        clocks[i] = x;\n    }\n\n    int result = runrun(0);\n    if (result == MAX) cout &lt;&lt; -1;\n    else cout &lt;&lt; result;\n\n    return 0;\n}\n</code></pre></div>\n<h1>복기</h1>\n<p>처음에 재귀 호출을</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">for (int i = 0; i &lt; 10; i++) {\n\tif (runCnt[i] &lt; 3) {\n\t\trunCnt[i]++;\n\t\tturn(clocks, i, 1);\n\t\tresult = min(runrun(runCnt), result);\n\n\t\tturn(clocks, i, -1);\n\t\trunCnt[i]--;\n\t}\n}</code></pre></div>\n<p>이렇게 짰었는데, 중복이 생기면서 무한으로 실행된다는걸 알았다.</p>\n<h2>수정할 점</h2>\n<ul>\n<li>네이밍</li>\n<li>재귀함수 작성</li>\n</ul>\n<h1>알아두면 좋은 것</h1>\n<p>완전 탐색에 자주나오는 유형이 있다.</p>\n<h2>모든 순열 만들기</h2>\n<p>가능한 순열의 수: N!\nN이 10을 넘어간다면 시간안에 해결 어려우므로 다른 방법 생각\nC++ 에서는 STL에 next_permutation() 함수가 자동으로 계산해줌</p>\n<h2>모든 조합 만들기</h2>\n<p>nCr = n-1Cr + n-1Cr-1</p>\n<h2>2^n가지 경우의 수 만들기</h2>\n<p>ex) n개의 질문의 답이 예/아니오 인 경우 답의 모든 조합의 수\n각 조합을 하나의 n비트 정수로 표현하면 반복문 하나로 모든 조합 간단하게 시도할 수 있다.</p>","frontmatter":{"date":"November 29, 2023","title":"[분할정복] 시계 맞추기"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%A0%9C\">문제</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%92%80%EC%9D%B4\">풀이</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B3%B5%EA%B8%B0\">복기</a></p>\n<ul>\n<li><a href=\"#%EC%88%98%EC%A0%95%ED%95%A0-%EC%A0%90\">수정할 점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%95%8C%EC%95%84%EB%91%90%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EA%B2%83\">알아두면 좋은 것</a></p>\n<ul>\n<li><a href=\"#%EB%AA%A8%EB%93%A0-%EC%88%9C%EC%97%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\">모든 순열 만들기</a></li>\n<li><a href=\"#%EB%AA%A8%EB%93%A0-%EC%A1%B0%ED%95%A9-%EB%A7%8C%EB%93%A4%EA%B8%B0\">모든 조합 만들기</a></li>\n<li><a href=\"#2n%EA%B0%80%EC%A7%80-%EA%B2%BD%EC%9A%B0%EC%9D%98-%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0\">2^n가지 경우의 수 만들기</a></li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"id":"06439bb8-e5cf-56eb-b450-c7b1f7fe3103","frontmatter__slug":"/blog/algorithm/clock","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}