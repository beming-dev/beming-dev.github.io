{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/algorithm/lis/","result":{"data":{"markdownRemark":{"html":"<h1>문제</h1>\n<p>정수 수열 S의 부분 수열이란 S에서 0개 이상의 숫자를 지우고 남은 수열을 말합니다. 이때 남은 숫자들이 순 증가 하면 이를 증가 부분 수열이라 합니다. 주어진 수열에서 얻을 수 있는 증가 부분 수열 중 가장 긴 수열의 길이를 찾아봅시다.\n이를 최대 증가 부분 수열 (LIS, Longest Increasing Subsequence)라고 합니다.</p>\n<h1>풀이</h1>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\n\nusing namespace std;\n\nint n;\nint box[101] = { 0, };\nint dp[101] = {0, };\n\nint solve(int idx) {\n\tint&amp; ret = dp[idx];\n\tif (ret != -1)\n\t\treturn ret;\n\n\tret = 1;\n\n\tif (idx == n) return ret;\n\n\tfor (int i = idx + 1; i &lt; n; i++) {\n\t\tif(box[i] &gt; box[idx])\n\t\t\tret = max(ret, 1 + solve(i));\n\t}\n\treturn ret;\n}\n\nint main(void) {\n\tcin &gt;&gt; n;\n\tmemset(dp, -1, sizeof(dp));\n\n\tfor (int i = 0; i &lt; n; i++) {\n\t\tcin &gt;&gt; box[i];\n\t}\n\n\tint result = 0;\n\tfor (int i = 0; i &lt; n; i++) {\n\t\tresult = max(result, solve(i));\n\t}\n\n\tcout &lt;&lt; result;\n\n\treturn 0;\n}</code></pre></div>\n<h1>개념</h1>\n<h2>최적 부분 구조</h2>\n<p>현재까지 어떤 경로로 이 부분 문제에 도달했건 남은 부분 문제를 항상 최적으로 풀어도 답을 구할 수 있는 문제를 최적 부분 구조라고 합니다.</p>\n<h1>복기</h1>\n<ul>\n<li>증가하는 부분 수열을 만들려면 수 하나를 선택하고, 뒤의 수 중 더 큰 수를 골라서 그 수에서 시작하는 증가 부분 수열을 다시 만드는 걸 반복하면 됩니다.</li>\n<li>직전에 고른 수보다 큰 수를 고르는 조건만 추가하면, 그 수에서 시작하는 가장 긴 증가 부분 수열을 구하는걸 반복해서 답을 구할 수 있습니다.</li>\n<li>그래서 solve()함수가 주어진 idx에 대해 거기서 시작하는 최대 증가 부분 수열의 길이를 반환하도록 작성했습니다.</li>\n<li>처음에는 solve(0)만을 호출하면 문제가 해결될 줄 알았는데, 이렇게 하면 0번 인덱스에서 시작하는 답만 구하게 돼서, 반복문으로 모든 수에서 시작하는 경우를 고려해야 합니다.</li>\n</ul>\n<h1>시간복잡도</h1>\n<p>각 경우에 n번 반복에서 n번 재귀 호출을 실행하므로 시간복잡도는 O(n^2)이 됩니다.</p>\n<h1>추가</h1>\n<p>이분탐색을 활용해 O(nlogn)의 시간복잡도로 문제를 해결할 수 있다.</p>","frontmatter":{"date":"November 27, 2023","title":"[동적계획] LIS"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%A0%9C\">문제</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%92%80%EC%9D%B4\">풀이</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9C%EB%85%90\">개념</a></p>\n<ul>\n<li><a href=\"#%EC%B5%9C%EC%A0%81-%EB%B6%80%EB%B6%84-%EA%B5%AC%EC%A1%B0\">최적 부분 구조</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B3%B5%EA%B8%B0\">복기</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84\">시간복잡도</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B6%94%EA%B0%80\">추가</a></p>\n</li>\n</ul>"}},"pageContext":{"id":"4485c144-1b0f-5337-b97d-4f1370c91b74","frontmatter__slug":"/blog/algorithm/lis","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}