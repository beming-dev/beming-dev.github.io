{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/redis/lua/","result":{"data":{"markdownRemark":{"html":"<h1>동시성 문제</h1>\n<p>만약에 Redis에서 GET관련 함수로 값을 가져오고 그 값을 애플리케이션에서 업데이트 한다음에, 다시 Redis에 save한다고 생각해봅시다.</p>\n<p>만약 A가 값을 읽고 가서 Redis에 저장하는 사이에 B가 값을 읽어 간다면 어떻게 될까요?</p>\n<p>A가 값을 Redis에 쓰는 사이 B는 본인이 읽어온 값으로 처리를 하고, 그 값을 Redis에 또 저장할 것입니다. 결과적으로 A의 작업이 무시 됩니다.</p>\n<p>이러한 동시성 문제는 어떠한 값을 읽어와서 처리하고 다시 저장하는 구조에서는 언제 어디서든 일어날 수 있는 문제입니다. Redis에서는 어떻게 이 문제를 해결할까요?</p>\n<ol>\n<li>atomic한 update 명령을 사용한다.</li>\n<li>WATCH명령을 통한 transaction을 실행한다.</li>\n<li>lock을 사용한다.</li>\n<li>lua script를 사용한다.</li>\n</ol>\n<h2>atomic한 명령 사용하기</h2>\n<p>Redis에는 값을 읽어와서 수정하고 저장하는게 아니라, 특정 값을 한번에 수정시키는 명령이 있습니다.</p>\n<p>예를 들면, HINCRBY와 같은 명령이 있습니다.\n만약 Hash의 특정 값을 1 증가시켜 달라는 명령이 2개가 동시에 들어온다면, 2가 되길 기대하지만 동시성 문제로 최종 결과가 1이 될 수 있습니다.\n그럴때, HINCRBY를 사용하면 결과가 무조건 2가 됩니다.</p>\n<h2>Transaction</h2>\n<p>트랜잭션이란, 내부적으로 여러 명령을 묶어서 처리하고 그 중간에 다른 명령이 끼어들 수 없도록 처리하는 것입니다.\n다른 데이터베이스와 같이 Redis에서도 Transaction 처리를 할 수 있습니다.</p>\n<p>하지만 다른 데이터베이스에서는 트랜잭션을 롤백, 취소 할 수 있는것과 다르게 Redis에서는 롤백, 취소가 불가능합니다. 그래서 다른 데이터베이스와는 다르게 약간 활용도가 떨어집니다.</p>\n<h3>MULTI</h3>\n<p>MULTI 명령은 여러 명령을 Redis로 전송하지만 실행하지는 않습니다.</p>\n<h3>EXEC</h3>\n<p>EXEC 명령어는 대기중인 모든 명령을 실행합니다.</p>\n<p>예를 들어보면</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MULTI\nSET color red\nSET count 5\nEXEC</code></pre></div>\n<p>다음과 같이 사용할 수 있습니다.</p>\n<h3>WATCH 명령 사용하기</h3>\n<p>WATCH [key]</p>\n<p>watch명령은 특정 key에 저장된 값을 지켜봅니다.\n다음 트랜잭션이 실행되기 전에 해당 key의 값이 변경되면, 트랜잭션이 자동으로 실패합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WATCH color\nMULTI\nSET color red\nSET count 5\nEXEC</code></pre></div>\n<p>이렇게 사용할 수 있습니다. 그럼 EXEC 명령이 실행되기 전, color에 저장된 값이 바뀐다면, 해당 transaction이 취소됩니다.</p>\n<p>Redis에서는 이렇게 WATCH MULTI ~ EXEC 명령을 사용해 동시성 문제를 해결할 수 있습니다.</p>\n<p>추가로 알아둬야 할 것은, Transaction은 Redis와의 connection을 완전히 점유하기 때문에, Transaction을 생성할 때 새 연결을 추가해야 한다는 것입니다.</p>\n<h2>LUAscript 사용하기</h2>\n<p>만약 redis의 sorted set에서 score가 2의 배수인 모든 member를 찾으려 한다고 생각해봅시다.\nRedis의 명령 중 이걸 한번에 할 수 있는 명령은 없습니다.\n모든 값을 읽고, filter를 적용해야하죠.</p>\n<h3>LUAscript</h3>\n<p>luascript는 redis의 모든 명령에 접근 가능한 서버에 작성하는 코드입니다.\n이를 redis에 전송하면, LUAscript를 실행하고 결과를 server로 전송 받을 수 있습니다.\n하나의 luascript로 여러개의 redis명령을 동시에 실행할 수 있습니다.</p>\n<p>LUAscript의 명령을 간단히만 알아봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">local</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">--지역 변수 선언</span>\nsum2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token comment\">--전역 변수 선언. redis에서 사용할 수 없음.</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> sum <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--조건문</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"big\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">if</span> sum <span class=\"token operator\">~=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--조건문</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrong\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">if</span> sum <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--조건문</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"right\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">--of 추가로 0, 빈 문자열 등은 false의 의미로 쓰이지 않음</span>\n<span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token string\">''</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--조건문</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"it will be printed\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">false</span> <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--조건문</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"it will not be printed\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">--null의 역할을 하는건 nil입니다.</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span> <span class=\"token comment\">--조건문</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"it will not be printed\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'red, '</span>green<span class=\"token string\">', '</span>blue'<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">--배열의 idx는 1부터 시작합니다.</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">#</span>colors<span class=\"token punctuation\">)</span> <span class=\"token comment\">--배열의 길이 출력</span>\n\ntable<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">--배열 마지막에 값 추가</span>\n\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token comment\">--i:인덱스, v:값</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">for</span> i<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token keyword\">do</span> <span class=\"token comment\">--시작값, 종료값</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- LUA table == JS object</span>\n<span class=\"token keyword\">local</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>id <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'samantha'</span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>LUAscript의 사용은 다음과 같은 과정을 거칩니다.</p>\n<ol>\n<li>script 작성</li>\n<li>script load -> script의 ID 반환받음</li>\n<li>script ID 이용하여 호출: EVALSHA명령 사용</li>\n</ol>\n<h3>script 작성</h3>\n<p>SCRIPT LOAD 'return 1 + 1'\n다음 명령을 실행하면 redis에서 script의 ID를 긴 문자열로 반환해줍니다.</p>\n<h3>script 사용</h3>\n<p>EVALSHA [scriptID] 0 [arg1] ...\nex) EVALSHA [ID] 0 '10' '20' '30'\n0의 의미는 잠시 후 설명하겠습니다.\narg로는 문자를 전달해줘야 합니다. LUA에서 tonumber함수로 숫자로 변환할 수 있습니다.\nidx가 1부터 시작한다는 걸 주의해야 합니다.</p>\n<h3>script에서 redis 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">return</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'color'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음과 같은 명령은 잘 작동하지만 이렇게 사용해서는 안됩니다.\n이 script를 호출하면 EVALSHA에서 어떤 키를 썼는지 모른 채 호출하게 됩니다.\nEVALSHA를 호출할 때 key를 전달해주는 방식을 사용해줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">return</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>KEYS는 자동으로 정의되는 전역변수입니다.</p>\n<p>EVALSHA [scriptID] 1 [key1] [arg1] ...</p>\n<p>ex) EVALSHA [ID] 1 color '10' '20' '30'\n아까의 명령에 있던 0은 key의 개수를 나타내는 것이었습니다.\n사용할 key의 개수만큼 적고, 그 뒤에 key들을 적고 그 뒤에 arg를 적어주면 됩니다.</p>\n<p>위에서 본 것처럼, EVALSHA에서 명시하지 않은 key를 사용하는 script를 작성해도 오류가 발생하지는 않습니다. 하지만 나중에 문제를 일으킬 가능성이 매우 높으므로, 사용하지 않는게 좋습니다.</p>","frontmatter":{"date":"February 19, 2025","title":"Redis 동시성 문제와 lua 스크립트"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C\">동시성 문제</a></p>\n<ul>\n<li>\n<p><a href=\"#atomic%ED%95%9C-%EB%AA%85%EB%A0%B9-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">atomic한 명령 사용하기</a></p>\n</li>\n<li>\n<p><a href=\"#transaction\">Transaction</a></p>\n<ul>\n<li><a href=\"#multi\">MULTI</a></li>\n<li><a href=\"#exec\">EXEC</a></li>\n<li><a href=\"#watch-%EB%AA%85%EB%A0%B9-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">WATCH 명령 사용하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#luascript-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">LUAscript 사용하기</a></p>\n<ul>\n<li><a href=\"#luascript\">LUAscript</a></li>\n<li><a href=\"#script-%EC%9E%91%EC%84%B1\">script 작성</a></li>\n<li><a href=\"#script-%EC%82%AC%EC%9A%A9\">script 사용</a></li>\n<li><a href=\"#script%EC%97%90%EC%84%9C-redis-%EC%82%AC%EC%9A%A9\">script에서 redis 사용</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"id":"858af4fe-bb14-5e00-8f64-cd1433e4b191","frontmatter__slug":"/blog/redis/lua","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}