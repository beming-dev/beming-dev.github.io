{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/redis/start/","result":{"data":{"markdownRemark":{"html":"<h1>Redis</h1>\n<p>redis는 데이터베이스입니다.\n저장한 데이터를 쿼리로 갖고 온다는 점은 다른 데이터베이스와 다른게 없습니다.\n그렇다면 Redis는 어떤점이 다를까요? 왜 Redis를 사용할까요?\n답은 간단합니다. 매우 빠르기 때문입니다.</p>\n<p>그렇다면 왜 빠를까요?</p>\n<ol>\n<li>모든 데이터가 memory에 저장됩니다.</li>\n<li>모든 데이터를 아주 단순한 구조(linked list, hash map 등)으로 관리합니다.</li>\n<li>다양한 기능이 추가돼있지 않아 단순합니다.</li>\n</ol>\n<p>물론 단점도 있습니다.\n메모리보다 큰 데이터를 가지고 작업하기 어렵습니다.\nRedis의 장점을 누리기 위해, 제한된 공간에서 제한된 기능으로 데이터를 사용하는 법을 배워야합니다.</p>\n<h1>Redis 설치</h1>\n<p>Redis를 사용하는 방법은 두가지가 있습니다.</p>\n<ol>\n<li>redis.com에서 Redis인스턴스 생성하기</li>\n<li>로컬에 설치하기</li>\n</ol>\n<p>간편하게 사용하려면 redis.com에서 설치하는게 편하지만, 무료로 사용할때는 메모리 제한이 있습니다.</p>\n<p>설치가 완료되면 redis cli 혹은 실행 환경에서 redis가 실행중인 인스턴스 정보를 입력하고 명령어를 입력하면 됩니다.</p>\n<h1>명령어</h1>\n<p>먼저 기본적인 GET, SET 명령을 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"redis\"><pre class=\"language-redis\"><code class=\"language-redis\">SET message &#39;Hello world&#39; //&quot;OK&quot;\n\nGET message //&#39;Hello world&#39;</code></pre></div>\n<p>GET/SET [key] [value] 다음과 같은 형태로 사용하면 key값을 기준으로 value를 저장하고 가져옵니다.</p>\n<p>GET/SET 명령은 string, number 타입에만 사용이 가능합니다. List, Hash등 다른 타입데 데이터를 삽입하고 싶다면, 다른 명령을 사용해야 합니다.</p>\n<p>명령어에 대한 공식 문서를 확인하고싶다면,\n<a href=\"https://redis.io/commands\">공식문서</a>에서 확인할 수 있습니다.</p>\n<h2>SET</h2>\n<p>SET 명령을 조금 더 자세히 사용해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SET key value [NX | XX] [GET] [EX seconds | PX milliseconds |\n  EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL]</code></pre></div>\n<p>공식문서에는 다음과 같이 나와있습니다. SET [key] [value] 외에도 다양한 옵션이 있는걸 확인할 수 있습니다.</p>\n<ul>\n<li>GET 옵션은, set을 하면서 이전에 저장된 값이 있다면 반환해줍니다.</li>\n<li>XX: redis에 이미 key가 존재할 때만 SET이 실행됩니다.</li>\n<li>NX: redis에 이미 key가 존재하지 않을 때만 SET이 실행됩니다.</li>\n<li>EX/PX: seconds/milliseconds초 후에 데이터를 redis에서 삭제합니다.</li>\n<li>EXAT/PXAT: unix time을 기준으로 그 시간이 지나면 데이터를 redis에서 삭제합니다.</li>\n</ul>\n<p>자동으로 데이터를 삭제하는 기능은 왜 필요할까요?\n이전에 말했듯이 Redis는 매우 빠릅니다. Redis를 통해 데이터를 접근하면 데이터베이스에 접근하는 것보다 빠르게 접근할 수 있습니다.</p>\n<p>따라서 자주 사용되는 데이터를 Redis에 저장해두고, 특정 시간동안 이를 유지하면 그 시간동안은 Redis를 통해 빠르게 데이터를 조회하는 캐싱 기능을 위해 자동으로 데이터를 삭제하는 기능이 존재합니다.</p>\n<h2>SET 추가</h2>\n<ul>\n<li>SETEX: SET에 EX 명령을 사용한것과 동일.</li>\n<li>SETNX: SET에 NX 명령을 사용한것과 동일.</li>\n<li>MSET: 여러 key value 동시에 등록. (MSET [key] [value] [key] [value])</li>\n<li>DEL [key]: key를 삭제합니다.</li>\n<li>SETRANGE: start인덱스부터의 값을 value로 변경합니다.\nSETRANGE [key] [start] [value]</li>\n</ul>\n<h2>GET</h2>\n<ul>\n<li>MGET: 여러 key의 값을 배열 형태로 반환해줍니다.\nMGET [key] [key] // [\"value\", \"value\"]</li>\n<li>GETRANGE: 저장된 문자열의 start에서 end까지의 index 값만을 가져옵니다.\nGETRANGE [key] [start] [end]</li>\n</ul>\n<h2>숫자 다루기</h2>\n<p>숫자도 기본적으로 문자열과 같이 GET, SET명령을 사용합니다.\n그러나 추가로 숫자에만 사용가능한 명령들이 있습니다.</p>\n<ul>\n<li>INCR [key]: key의 값을 1 증가시킵니다.</li>\n<li>DECR [key]: key의 값을 1 감소시킵니다.</li>\n<li>INCRBY [key] [value]: key의 값을 value 만큼 증가시킵니다.</li>\n<li>DECRBY [key] [value]: key의 값을 value 만큼 감소시킵니다.</li>\n<li>INCRBYFLOAT [key] [value]: key의 값을 value(실수) 만큼 증가시킵니다.</li>\n</ul>","frontmatter":{"date":"February 17, 2025","title":"Redis 시작하기"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#redis\">Redis</a></p>\n</li>\n<li>\n<p><a href=\"#redis-%EC%84%A4%EC%B9%98\">Redis 설치</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%AA%85%EB%A0%B9%EC%96%B4\">명령어</a></p>\n<ul>\n<li><a href=\"#set\">SET</a></li>\n<li><a href=\"#set-%EC%B6%94%EA%B0%80\">SET 추가</a></li>\n<li><a href=\"#get\">GET</a></li>\n<li><a href=\"#%EC%88%AB%EC%9E%90-%EB%8B%A4%EB%A3%A8%EA%B8%B0\">숫자 다루기</a></li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"id":"216cb144-3032-58f8-a2b8-242cd74f6429","frontmatter__slug":"/blog/redis/start","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}