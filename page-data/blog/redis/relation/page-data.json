{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/redis/relation/","result":{"data":{"markdownRemark":{"html":"<h1>관계형 데이터</h1>\n<p>redis에서 관계형 데이터를 어떻게 다룰까요?</p>\n<ol>\n<li>id의 list를 가져온 후 list를 이용해 id에 맞는 데이터 가져오기</li>\n<li>SORT사용하기</li>\n</ol>\n<p>1번 방법을 사용하면 Redis에 두번 요청을 보내게 됩니다.SORT를 사용하는 방법에 대해 알아봅시다.</p>\n<h2>SORT</h2>\n<p>SORT 명령어는 이름과 다르게 꼭 정렬할때만 사용하지는 않습니다.</p>\n<p>다음과 같은 데이터를 예시로 만들어봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HSET books:good title 'Good book' year 1950\nHSET books:bad title 'Bad book' year 1930\nHSET books:ok title 'OK book' year 1940\n\nZADD books:likes 999 good\nZADD books:likes 0 bad\nZADD books:likes 40 ok</code></pre></div>\n<p>여기서 한가지 알아둬야할 것은, 정렬집합에 SORT를 사용할 때, 정렬집합의 member를 SORT에서는 score라 부릅니다. 매우 헷갈리죠.</p>\n<h3>정렬하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SORT books:likes ALPHA // [\"bad\", \"good\", \"ok\"]</code></pre></div>\n<ul>\n<li>ALPHA는 alphabet순으로 정렬하라는 의미입니다.</li>\n</ul>\n<h3>BY 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SORT books:likes BY books:*->year // [\"bad\", \"ok\", \"good\"]</code></pre></div>\n<ol>\n<li>정렬 집합에서 member를 전부 추출한다.</li>\n<li>books:*->year * 위치에 모든 값을 순회하며 집어넣는다. 즉, 이 과정에서 books:good, books:ok, books:bad 키를 가진 HASH를 전부 순회하게 된다.</li>\n<li>순회한 결과에서 year값을 가져온 후, 그 값을 기준으로 정렬한다.</li>\n</ol>\n<p>이 과정이 관계형 데이터를 처리하는 것과 같은 효과를 냅니다.\nBY에 nosort라는 특수한 값을 사용할 수도 있습니다.</p>\n<h2>예시</h2>\n<p>item을 조회수를 기준으로 정렬하여 가지고 오고싶은 상황이라 생각해봅시다.</p>\n<p>여기서는 node-redis를 이용하여 예를 들겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token function\">itemsByViewsKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// return 'items#views'</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token constant\">GET</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t\t<span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">itemsKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> name</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">itemsKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> views</span><span class=\"token template-punctuation string\">`</span></span>\n\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token constant\">BY</span><span class=\"token operator\">:</span> <span class=\"token string\">'score'</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>#는 원래의 member를 포함하겠다는 뜻입니다.</li>\n<li>itemsByViewsKey와 itemsKey함수는 각각 정의해둔 key를 반환하는 함수입니다.</li>\n</ul>\n<p>간단히 설명해보자면, items#views를 key로 가지는 정렬집합에서 score값(views) 기준으로 정렬한다음 원래의 member(id), name, views 값을 itemsKey를 key로 가지는 hash에서 가져오는 것입니다.</p>","frontmatter":{"date":"February 19, 2025","title":"Redis 관계형 데이터"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EA%B4%80%EA%B3%84%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0\">관계형 데이터</a></p>\n<ul>\n<li>\n<p><a href=\"#sort\">SORT</a></p>\n<ul>\n<li><a href=\"#%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0\">정렬하기</a></li>\n<li><a href=\"#by-%EC%82%AC%EC%9A%A9\">BY 사용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%98%88%EC%8B%9C\">예시</a></p>\n</li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"id":"7ba6ebc2-c37a-5cbf-b954-4dc78477805d","frontmatter__slug":"/blog/redis/relation","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}