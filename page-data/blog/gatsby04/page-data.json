{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/gatsby04/","result":{"data":{"markdownRemark":{"html":"<p>component에서 graphql 데이터 불러오기</p>\n<p>우리는 src/pages에 있는 파일들에서 graphql을 사용할 때 아래와 같은 방법을 사용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export const pageQuery = graphql`\n  query ($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n      }\n    }\n  }\n`</code></pre></div>\n<p>그러나 src/components의 component에서 위와같은 방법으로 접근하려 하면 오류가 발생한다. 따라서 우리는 gatsby에 포함돼 있는 useStaticQuery를 사용해서 graphql을 사용해야 한다. 예시를 한번 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from \"react\"\nimport { graphql, useStaticQuery, Link } from \"gatsby\"\nimport CategoryItem from \"./CategoryItem\"\nimport \"./CategoryList.scss\"\n\nconst CategoryList = ({ category }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n        edges {\n          node {\n            frontmatter {\n              thumbnail\n              categories\n              date\n              slug\n              title\n            }\n          }\n        }\n      }\n    }\n  `)\n  let { allMarkdownRemark } = data\n  let { edges } = allMarkdownRemark\n  edges = edges.filter(edge => edge.node.frontmatter.categories === category)\n\n  return (\n    &lt;div className=\"category-list\">\n      &lt;span className=\"name\">\n        &lt;Link to={`/${category}`}>{category}&lt;/Link>\n      &lt;/span>\n      &lt;div className=\"items\">\n        {edges.map((edge, i) => (\n          &lt;CategoryItem key={i} info={edge.node.frontmatter} />\n        ))}\n      &lt;/div>\n    &lt;/div>\n  )\n}\n\nexport default CategoryList\n</code></pre></div>\n<p>그냥 component안에서 return전에 useStaticQuery로 graphql을 사용하고 결과를 변수에 저장하면 변수를 통해서 모든 데이터에 접근할 수 있다.</p>\n<p>끝이다.</p>","frontmatter":{"date":"October 01, 2022","title":"gatsby로 블로그 만들기 04"},"tableOfContents":""}},"pageContext":{"id":"cfd39958-3e3b-569d-8868-0faeb21cd6c1","frontmatter__slug":"/blog/gatsby04","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2018336255","2540505676","2678393935","2810064759","3398502926"],"slicesMap":{}}